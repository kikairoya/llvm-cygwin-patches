name: 'Prepare Cygwin root filesystem'
description: 'Install Cygwin root filesystem with local cache'

inputs:
  skip-update:
    description: Don't launch setup.exe
    required: false
    default: true
  install-dir:
    description: Installation directory in Windows notation
    required: false
  cache-key-base:
    description: Cache identifier
    requried: false
    default: ''
  allow-test-packages:
    description: Consider package versions marked test for installation
    required: false
    default: false

outputs:
  root:
    description: Cygwin root directory in host format
    value: ${{ steps.unpack-cygwin-linux.outputs.root || steps.cygwin.outputs.root || steps.unpack-cygwin-windows.outputs.root  }}
  workspace:
    description: Workspace directory in unix format
    value: ${{ steps.cleanup.outputs.workspace || github.workspace }}

runs:
  using: "composite"
  steps:
    - name: Set globals
      id: globals
      env:
        RUNNER_OS: ${{ runner.os }}
        INPUTS_SKIP_UPDATE: ${{ inputs.skip-update }}
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "is-windows=true" >> "$GITHUB_OUTPUT"
          if [ "$INPUTS_SKIP_UPDATE" != "true" ]; then
            echo "setup-cygwin=true" >> "$GITHUB_OUTPUT"
          else
            echo "setup-cygwin=" >> "$GITHUB_OUTPUT"
          fi
        else
          echo "is-windows=" >> "$GITHUB_OUTPUT"
          echo "setup-cygwin=" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - id: cache-restore
      uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        fail-on-cache-miss: ${{ ! steps.globals.outputs.setup-cygwin }}
        enableCrossOsArchive: true
        key: cygwin-rootfs_${{ inputs.cache-key-base }}_
        restore-keys: cygwin-rootfs_${{ inputs.cache-key-base }}_
        path: cygwin_tarstrap

    - name: unpack Cygwin
      id: unpack-cygwin-linux
      if: ${{ ! steps.globals.outputs.is-windows }}
      env:
        INPUTS_INSTALL_DIR: ${{ inputs.install-dir }}
      run: |
        archive=$PWD/cygwin_tarstrap/cygwinroot.tar.gz
        : ${INPUTS_INSTALL_DIR:=$PWD/cygwin}
        cygroot=$(basename ${INPUTS_INSTALL_DIR//\\/\/})
        mkdir $cygroot
        cd $cygroot
        echo "root=$PWD" >> "$GITHUB_OUTPUT"
        tar --strip-components=$(tar -t -f $archive 2>/dev/null | head -n1 | grep -o / | wc -l) -x -f $archive
        rm -f $archive
        cd usr
        ln -s ../bin
        ln -s ../lib
        echo "::group::installed packages"
        cat ../etc/setup/installed.db
        echo "::endgroup::"
      shell: bash

    - name: unpack Cygwin
      id: unpack-cygwin-windows
      if: ${{ steps.globals.outputs.is-windows }}
      env:
        INPUTS_INSTALL_DIR: ${{inputs.install-dir}}
        CACHE_HIT: ${{ ! steps.globals.outputs.setup-cygwin || steps.cache-restore.outputs.cache-hit }}
      run: |
        if not exist cygwin_tarstrap goto nohit

        cd cygwin_tarstrap
        path %cd%\bin;%path%
        bin\tar.exe xf cygwinroot.tar.gz
        for /f %%k in (rootdir.txt) do set INPUTS_INSTALL_DIR=%%k

        :nohit
        echo root=%INPUTS_INSTALL_DIR%>> %GITHUB_OUTPUT%
      shell: cmd

    - id: cygwin
      name: run Cygwin setup
      if: steps.globals.outputs.setup-cygwin
      uses: cygwin/cygwin-install-action@f2009323764960f80959895c7bc3bb30210afe4d # v6
      with:
        add-to-path: false
        install-dir: ${{steps.unpack-cygwin-windows.outputs.root}}
        allow-test-packages: ${{inputs.allow-test-packages}}
        site: >-
          http://mirrors.kernel.org/sourceware/cygwin/
        packages:
          binutils
          clang
          lld
          cmake
          git
          make
          ninja
          python3
          perl
          libxml2-devel
          zlib-devel
          libzstd-devel
          procps-ng

    - name: upgrade Cygwin packages
      if: steps.globals.outputs.setup-cygwin
      env:
        SETUPEXE: ${{steps.cygwin.outputs.setup}}
        TESTOPT: ${{ inputs.allow-test-packages == 'true' && '-t' || '' }}
      run: |
        %SETUPEXE% -ogqOrn %TESTOPT%
      shell: cmd

    - name: tar rootfs
      id: archive-root
      if: steps.globals.outputs.setup-cygwin
      run: |
        rmdir /s /q cygwin_tarstrap
        mkdir cygwin_tarstrap
        cd cygwin_tarstrap
        mkdir bin
        set cygroot=${{steps.cygwin.outputs.root}}
        echo %cygroot% > rootdir.txt
        for %%f in (cygiconv-2.dll cygintl-8.dll cygwin1.dll cygpath.exe gzip.exe tar.exe) do copy /b /y %cygroot%\bin\%%f bin
        mkdir etc
        echo none /mnt cygdrive binary,posix=0,user 0 0 > etc\fstab
        for /f %%k in ('bin\cygpath.exe -ua ${{steps.cygwin.outputs.root}}') do set ucygroot=%%k
        path %cd%\bin;%path%
        copy /y /b %cygroot%\etc\setup\installed.db %GITHUB_WORKSPACE%\key-source.txt
        bin\tar.exe cvaf cygwinroot.tar %ucygroot% >> %GITHUB_WORKSPACE%\key-source.txt
        bin\gzip.exe cygwinroot.tar
      shell: cmd

    - name: prepare new cache key
      id: cache-key
      if: steps.globals.outputs.setup-cygwin
      env:
        BASE: ${{ inputs.cache-key-base }}
        HASH: ${{ hashFiles('key-source.txt') }}
      run: echo key=cygwin-rootfs_%BASE%_%HASH%>> %GITHUB_OUTPUT%
      shell: cmd

    - uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      if: ${{ steps.globals.outputs.setup-cygwin && steps.cache-restore.outputs.cache-matched-key != steps.cache-key.outputs.key }}
      with:
        key: ${{ steps.cache-key.outputs.key }}
        enableCrossOsArchive: true
        path: cygwin_tarstrap

    - name: cleanup
      id: cleanup
      if: steps.globals.outputs.is-windows
      env:
        CYGWIN_ROOT: ${{ steps.cygwin.outputs.root || steps.unpack-cygwin-windows.outputs.root }}
      run: |
        # Run on Cygwin
        if [[ $(uname -o) = Msys ]] && [ -d "$CYGWIN_ROOT" ]; then
          PATH="$(cygpath -ua $CYGWIN_ROOT/bin):$PATH" MSYS_NO_PATHCONV=1 exec env \
            "GITHUB_ACTION_PATH=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_ACTION_PATH)" \
            "GITHUB_ENV=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_ENV)" \
            "GITHUB_EVENT_PATH=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_EVENT_PATH)" \
            "GITHUB_OUTPUT=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_OUTPUT)" \
            "GITHUB_PATH=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_PATH)" \
            "GITHUB_STEP_SUMMARY=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_STEP_SUMMARY)" \
            "GITHUB_WORKSPACE=$($CYGWIN_ROOT/bin/cygpath -ua $GITHUB_WORKSPACE)" \
            "RUNNER_TEMP=$($CYGWIN_ROOT/bin/cygpath -ua $RUNNER_TEMP)" \
            "RUNNER_TOOL_CACHE=$($CYGWIN_ROOT/bin/cygpath -ua $RUNNER_TOOL_CACHE)" \
            env bash -o igncr -eo pipefail "$(cygpath -w "$0")"
        fi

        # or just
        if [[ $(uname -o) = Msys ]] && [ -d "$CYGWIN_ROOT" ]; then
          PATH="$(cygpath -ua $CYGWIN_ROOT/bin):$PATH" exec env env bash -o igncr -eo pipefail "$(cygpath -w "$0")"
        fi

        mkdir -p /var/wrapper-bin
        cd /var/wrapper-bin
        echo "$(cygpath -wa .)" >> $GITHUB_PATH
        {
          echo "@echo off"
          echo "set PATH=${CYGWIN_ROOT}\\bin;%PATH%"
          echo "${CYGWIN_ROOT}\\bin\\bash.exe -o igncr -eo pipefail %*"
        } | sed 's/$/\r/' > cygwin-bash.cmd
        chmod +x cygwin-bash.cmd
        cd -

        echo ::group::installed packages
        cat /etc/setup/installed.db
        echo ::endgroup::

        rm -rf cygwin_tarstrap
      shell: bash

    - name: testcmd
      if: false
      run: |
        uname -a
      shell: cygwin-bash '{0}'

    - name: testcygbash
      if: false
      env:
        CYGWIN_ROOT: ${{ steps.cygwin.outputs.root || steps.unpack-cygwin-windows.outputs.root }}
      run: |
        # Run on Cygwin
        if [[ $(uname -o) = Msys ]] && [ -d "$CYGWIN_ROOT" ]; then
          PATH="$(cygpath -ua $CYGWIN_ROOT/bin):$PATH" exec env env bash -o igncr -eo pipefail "$(cygpath -w "$0")"
        fi
        uname -a
      shell: bash
