From 99f72e6f30eabadeef96274a8b0acc4bdaf1f301 Mon Sep 17 00:00:00 2001
From: kikairoya <kikairoya@gmail.com>
Date: Sun, 7 Sep 2025 22:31:20 +0900
Subject: [PATCH 27/38] [Clang][MinGW] Export nested classes which instantiated
 by enclosing template's explicit instantiation declaration

MinGW-GCC applies explicit instantiateion declaration of a class template to its nested type but doesn't inherit
`__declspec(dllexport)` attribute to the nested class, causes undefined reference to member functions of the nested
class.
To resolve this self-inconsistency, such `__declspec(dllexport)` attribute on explicit instantiation declaration should
inherit to the nested class.
---
 clang/lib/Sema/SemaDeclCXX.cpp | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/clang/lib/Sema/SemaDeclCXX.cpp b/clang/lib/Sema/SemaDeclCXX.cpp
index 232d44216758..729ed2df58f9 100644
--- a/clang/lib/Sema/SemaDeclCXX.cpp
+++ b/clang/lib/Sema/SemaDeclCXX.cpp
@@ -6590,11 +6590,13 @@ void Sema::checkClassLevelDLLAttribute(CXXRecordDecl *Class) {
       !ClassExported &&
       cast<DLLImportAttr>(ClassAttr)->wasPropagatedToBaseTemplate();
 
+  const TargetInfo &TI = Context.getTargetInfo();
+
   // Ignore explicit dllexport on explicit class template instantiation
   // declarations, except in MinGW mode.
   if (ClassExported && !ClassAttr->isInherited() &&
       TSK == TSK_ExplicitInstantiationDeclaration &&
-      !Context.getTargetInfo().getTriple().isOSCygMing()) {
+      !TI.getTriple().isOSCygMing()) {
     Class->dropAttr<DLLExportAttr>();
     return;
   }
@@ -6611,6 +6613,15 @@ void Sema::checkClassLevelDLLAttribute(CXXRecordDecl *Class) {
         Member->hasAttr<ExcludeFromExplicitInstantiationAttr>())
       continue;
 
+    // Inherit dllexport to nested class in MinGW mode.
+    if (TI.getTriple().isOSCygMing() && !getDLLAttr(Member) &&
+        isa<RecordDecl>(Member)) {
+      auto *NewAttr = cast<InheritableAttr>(ClassAttr->clone(getASTContext()));
+      NewAttr->setInherited(true);
+      Member->addAttr(NewAttr);
+      continue;
+    }
+
     VarDecl *VD = dyn_cast<VarDecl>(Member);
     CXXMethodDecl *MD = dyn_cast<CXXMethodDecl>(Member);
 
@@ -6626,7 +6637,7 @@ void Sema::checkClassLevelDLLAttribute(CXXRecordDecl *Class) {
       if (MD->isInlined()) {
         // MinGW does not import or export inline methods. But do it for
         // template instantiations.
-        if (!Context.getTargetInfo().shouldDLLImportComdatSymbols() &&
+        if (!TI.shouldDLLImportComdatSymbols() &&
             TSK != TSK_ExplicitInstantiationDeclaration &&
             TSK != TSK_ExplicitInstantiationDefinition)
           continue;
-- 
2.51.0

