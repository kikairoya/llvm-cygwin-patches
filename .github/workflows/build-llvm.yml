name: Build LLVM Cygwin binary with patches
on:
  schedule:
    - cron: '18 22 * * *'
  workflow_dispatch:
    inputs:
      config-name:
        description: 'Build config name'
        type: string
        required: false
        default: ''
  workflow_call:
    inputs:
      config-name:
        description: 'Build config name'
        type: string
        required: false
        default: ''
      prereq-artifacts:
        description: Additional artifacts to be used
        type: string
        required: false
        default: ''
      stage1-bindir:
        type: string
        required: false
        default: ''
      install-prefix:
        description: The path prefixed in package archive
        type: string
        required: false
        default: '/'
      build-name:
        type: string
        required: false
        default: ''
      patch-commit:
        type: string
        required: false
        default: ''
      source-artifact:
        type: string
        required: false
        default: ''
      source-retention-days:
        type: number
        required: false
        default: 0
      build-retention-days:
        type: number
        required: false
        default: 0
      install-retention-days:
        type: number
        required: false
        default: 0
    outputs:
      config-name:
        value: ${{ jobs.select.outputs.config-name }}
      patch-path:
        value: ${{ jobs.select.outputs.patch-path }}
      patch-commit:
        value: ${{ jobs.select.outputs.patch-commit }}
      build-name:
        value: ${{ jobs.select.outputs.build-name }}
      source-artifact:
        value: ${{ jobs.select.outputs.source-artifact }}
      build-artifacts:
        value: ${{ jobs.collect-results.outputs.build-artifacts }}
      install-artifacts:
        value: ${{ jobs.collect-results.outputs.install-artifacts }}

jobs:
  select:
    runs-on: ubuntu-latest
    name: Select target ${{ inputs.config-name || 'cygwin-dylib' }}

    outputs:
      patch-path: 'patches'
      llvm-path: 'llvm-project'
      config-name: ${{ inputs.config-name || 'cygwin-dylib' }}
      build-host: ${{ steps.config.outputs.build-host }}
      enable-llvm: ${{ steps.config.outputs.enable-llvm }}
      disable-llvm-test: ${{ steps.config.outputs.disable-llvm-test }}
      enable-clang: ${{ steps.config.outputs.enable-clang }}
      disable-clang-test: ${{ steps.config.outputs.disable-clang-test }}
      enable-lld: ${{ steps.config.outputs.enable-lld }}
      disable-lld-test: ${{ steps.config.outputs.disable-lld-test }}
      enable-runtimes: ${{ steps.config.outputs.enable-runtimes }}
      disable-runtimes-test: ${{ steps.config.outputs.disable-runtimes-test }}
      build-name: ${{ inputs.build-name || steps.prepare-tree.outputs.build-name }}
      patch-commit: ${{ inputs.patch-commit || steps.prepare-tree.outputs.patch-commit }}
      source-artifact: ${{ inputs.source-artifact || steps.prepare-tree.outputs.source-artifact }}
      prereq-artifacts: ${{ inputs.source-artifact || steps.prepare-tree.outputs.source-artifact }}${{ steps.config.outputs.prereq-artifacts }}

    steps:
      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - run: |
          if [ -n "$SOURCE_ARTIFACT" ]; then
            [ "$BUILD_NAME" ]
            [ "$PATCH_COMMIT" ]
          fi
          if [ -n "$PREREQ_ARTIFACTS" ]; then
            echo "prereq-artifacts=,$PREREQ_ARTIFACTS" >> "$GITHUB_OUTPUT"
          fi
          cat "self/config/$CONFIG_NAME/conf.txt" >> "$GITHUB_OUTPUT"
        env:
          CONFIG_NAME: ${{ inputs.config-name || 'cygwin-dylib' }}
          SOURCE_ARTIFACT: ${{ inputs.source-artifact }}
          PREREQ_ARTIFACTS: ${{ inputs.prereq-artifacts }}
          BUILD_NAME: ${{ inputs.build-name }}
          PATCH_COMMIT: ${{ inputs.patch-commit }}
        id: config

      - name: prepare build tree
        id: prepare-tree
        if: ${{ ! inputs.source-artifact }}
        uses: ./self/.github/actions/prepare-llvm-tree
        with:
          llvm-path: 'llvm-project'
          remote-ref: ${{ steps.config.outputs.upstream-branch }}
          patch-path: 'patches'
          patch-ref: ''
          patch-series: ${{ steps.config.outputs.patch-series }}
          cygwin-root: ''
          source-retention-days: ${{ inputs.source-retention-days }}

  build-llvm:
    needs: select
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ needs.select.outputs.enable-llvm }}
    name: Build LLVM

    outputs:
      artifacts: ${{ needs.select.outputs.prereq-artifacts }},${{ steps.build.outputs.build-artifact }}
      build-artifact: ${{ steps.build.outputs.build-artifact }}
      install-artifact: ${{ steps.build.outputs.install-artifact }}

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          config-name: ${{ needs.select.outputs.config-name }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.select.outputs.prereq-artifacts }}

      - name: build llvm
        id: build
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: llvm
          build-name: ${{ needs.select.outputs.build-name }}
          parallel-compile-jobs: 3
          install-prefix: ${{ inputs.install-prefix }}
          stage1-bindir: ${{ inputs.stage1-bindir }}
          build-retention-days: ${{ inputs.build-retention-days }}
          install-retention-days: ${{ inputs.install-retention-days }}

  check-llvm:
    needs: [select, build-llvm]
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ ! needs.select.outputs.disable-llvm-test }}
    name: Check LLVM

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - name: configure Pagefile
        if: ${{ runner.os == 'Windows' }}
        uses: al-cheb/configure-pagefile-action@a3b6ebd6b634da88790d9c58d4b37a7f4a7b8708 # v1.4
        with:
          minimum-size: 8GB
          disk-root: 'C:'

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          config-name: ${{ needs.select.outputs.config-name }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.build-llvm.outputs.artifacts }}

      - name: check llvm
        id: check
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: llvm
          build-target: check-all
          build-name: ${{ needs.select.outputs.build-name }}
          stage1-bindir: ${{ inputs.stage1-bindir }}
          extra-lit-opts: '-j2'

  build-clang:
    needs: [select, build-llvm]
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ needs.select.outputs.enable-clang }}
    name: Build Clang

    outputs:
      artifacts: ${{ needs.build-llvm.outputs.artifacts }},${{ steps.build.outputs.build-artifact }}
      build-artifact: ${{ steps.build.outputs.build-artifact }}
      install-artifact: ${{ steps.build.outputs.install-artifact }}

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.build-llvm.outputs.artifacts }}

      - name: build clang
        id: build
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: clang
          build-name: ${{ needs.select.outputs.build-name }}
          parallel-compile-jobs: 3
          install-prefix: ${{ inputs.install-prefix }}
          stage1-bindir: ${{ inputs.stage1-bindir }}

  check-clang:
    needs: [select, build-clang]
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ ! needs.select.outputs.disable-clang-test }}
    name: Check Clang

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          config-name: ${{ needs.select.outputs.config-name }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.build-clang.outputs.artifacts }}

      - name: check clang
        id: check
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: clang
          build-target: check-all
          build-name: ${{ needs.select.outputs.build-name }}
          stage1-bindir: ${{ inputs.stage1-bindir }}

  build-lld:
    needs: [select, build-llvm]
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ needs.select.outputs.enable-lld }}
    name: Build LLD

    outputs:
      artifacts: ${{ needs.build-llvm.outputs.artifacts }},${{ steps.build.outputs.build-artifact }}
      build-artifact: ${{ steps.build.outputs.build-artifact }}
      install-artifact: ${{ steps.build.outputs.install-artifact }}

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          config-name: ${{ needs.select.outputs.config-name }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.build-llvm.outputs.artifacts }}

      - name: build lld
        id: build
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: lld
          build-name: ${{ needs.select.outputs.build-name }}
          parallel-compile-jobs: 3
          install-prefix: ${{ inputs.install-prefix }}
          stage1-bindir: ${{ inputs.stage1-bindir }}

  check-lld:
    needs: [select, build-lld]
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ ! needs.select.outputs.disable-lld-test }}
    name: Check LLD

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          config-name: ${{ needs.select.outputs.config-name }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.build-lld.outputs.artifacts }}

      - name: check lld
        id: check
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: lld
          build-target: check-lld
          build-name: ${{ needs.select.outputs.build-name }}
          stage1-bindir: ${{ inputs.stage1-bindir }}

  build-runtimes:
    needs: select
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ needs.select.outputs.enable-runtimes }}
    name: Build Runtimes

    outputs:
      artifacts: ${{ needs.select.outputs.prereq-artifacts }},${{ steps.build.outputs.build-artifact }}
      build-artifact: ${{ steps.build.outputs.build-artifact }}
      install-artifact: ${{ steps.build.outputs.install-artifact }}

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.select.outputs.prereq-artifacts }}

      - name: build runtimes
        id: build
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: runtimes
          build-name: ${{ needs.select.outputs.build-name }}
          install-prefix: ${{ inputs.install-prefix }}
          stage1-bindir: ${{ inputs.stage1-bindir }}

  check-runtimes:
    needs: [select, build-runtimes]
    runs-on: ${{ needs.select.outputs.build-host }}
    if: ${{ ! needs.select.outputs.disable-runtimes-test }}
    name: Check Runtimes

    steps:
      - name: Maximize build disk space
        if: ${{ runner.os == 'Linux' }}
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10

      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-self
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: self

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./self/.github/actions/prepare-cygwin-root

      - name: restore build tree
        id: prepare-tree
        uses: ./self/.github/actions/restore-llvm-tree
        with:
          config-name: ${{ needs.select.outputs.config-name }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          patch-ref: ${{ needs.select.outputs.patch-commit }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          artifact-ids: ${{ needs.build-runtimes.outputs.artifacts }}

      - name: check runtimes
        id: check
        uses: ./self/.github/actions/build-llvm
        with:
          llvm-path: ${{ needs.select.outputs.llvm-path }}
          patch-path: ${{ needs.select.outputs.patch-path }}
          config-name: ${{ needs.select.outputs.config-name }}
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-project: runtimes
          build-target: check-runtimes
          build-name: ${{ needs.select.outputs.build-name }}
          stage1-bindir: ${{ inputs.stage1-bindir }}

  collect-results:
    needs: [build-llvm, build-clang, build-lld, build-runtimes]
    runs-on: ubuntu-latest
    if: ${{ always() }}

    outputs:
      build-artifacts: ${{ steps.collect.outputs.build-artifacts }}
      install-artifacts: ${{ steps.collect.outputs.install-artifacts }}

    steps:
      - id: collect
        env:
          LLVM_BUILD: ${{ needs.build-llvm.outputs.build-artifact }}
          LLVM_INSTALL: ${{ needs.build-llvm.outputs.install-artifact }}
          CLANG_BUILD: ${{ needs.build-clang.outputs.build-artifact }}
          CLANG_INSTALL: ${{ needs.build-clang.outputs.install-artifact }}
          LLD_BUILD: ${{ needs.build-lld.outputs.build-artifact }}
          LLD_INSTALL: ${{ needs.build-lld.outputs.install-artifact }}
          RUNTIMES_BUILD: ${{ needs.build-runtimes.outputs.build-artifact }}
          RUNTIMES_INSTALL: ${{ needs.build-runtimes.outputs.install-artifact }}
        run: |
          echo build-artifacts=$(echo $LLVM_BUILD $CLANG_BUILD $LLD_BUILD $RUNTIMES_BUILD | sed 's/  */,/g;s/ //g') >> "$GITHUB_OUTPUT"
          echo install-artifacts=$(echo $LLVM_INSTALL $CLANG_INSTALL $LLD_INSTALL $RUNTIMES_INSTALL | sed 's/  */,/g;s/ //g') >> "$GITHUB_OUTPUT"
        shell: bash
      
