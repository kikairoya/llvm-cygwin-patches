From cb196b2c7c6410cfad061b3e7307d5f925687f61 Mon Sep 17 00:00:00 2001
From: kikairoya <kikairoya@gmail.com>
Date: Sat, 7 Jun 2025 17:56:10 +0900
Subject: [PATCH 12/15] [libc++][Test][Cygwin] Diverge expected result for the
 Cygwin target (part 5/5 - locale)

---
 .../ext.manip/get_money.pass.cpp              | 46 ++++++------
 .../ext.manip/put_money.pass.cpp              | 11 ++-
 .../std.manip/setfill_wchar_max.pass.cpp      |  2 +-
 .../wcerr-wide-mode.sh.cpp                    |  1 +
 .../wide.stream.objects/wcin-wide-mode.sh.cpp |  1 +
 .../wcout-wide-mode.sh.cpp                    |  1 +
 .../classic_table.pass.cpp                    |  3 +-
 .../locale.ctype.byname/is_1.pass.cpp         |  2 +-
 .../locale.ctype.byname/is_many.pass.cpp      |  2 +-
 .../locale.ctype.byname/scan_is.pass.cpp      |  2 +-
 .../locale.ctype.byname/scan_not.pass.cpp     |  2 +-
 .../locale.ctype.byname/tolower_1.pass.cpp    |  3 +
 .../locale.ctype.byname/tolower_many.pass.cpp |  3 +
 .../locale.ctype.byname/toupper_1.pass.cpp    |  3 +
 .../locale.ctype.byname/toupper_many.pass.cpp |  3 +
 .../locale.ctype.byname/widen_1.pass.cpp      |  2 +-
 .../locale.ctype.byname/widen_many.pass.cpp   |  2 +-
 .../put_long_double_en_US.pass.cpp            | 67 +++++++++--------
 .../put_string_en_US.pass.cpp                 | 67 +++++++++--------
 .../curr_symbol.pass.cpp                      | 11 ++-
 .../neg_format.pass.cpp                       |  4 +-
 .../negative_sign.pass.cpp                    |  8 +-
 .../pos_format.pass.cpp                       |  4 +-
 .../locale.time.get.byname/get_date.pass.cpp  |  2 +-
 .../get_date_wide.pass.cpp                    |  2 +-
 .../locale.time.get.byname/get_one.pass.cpp   | 23 +++---
 .../get_one_wide.pass.cpp                     | 15 ++--
 .../locale.numpunct.byname/grouping.pass.cpp  |  2 +-
 .../thousands_sep.pass.cpp                    |  4 +-
 .../strings/string.conversions/stod.pass.cpp  |  3 +
 .../strings/string.conversions/stof.pass.cpp  |  3 +
 .../strings/string.conversions/stold.pass.cpp |  3 +
 .../thread.thread.id/format.functions.tests.h |  2 +-
 .../thread.thread.id/format.pass.cpp          |  2 +-
 .../time.cal.md.nonmembers/ostream.pass.cpp   |  5 +-
 .../time.cal/time.cal.mdlast/ostream.pass.cpp | 11 ++-
 .../ostream.pass.cpp                          | 11 ++-
 .../time.cal.mwd.nonmembers/ostream.pass.cpp  | 11 ++-
 .../ostream.pass.cpp                          | 15 ++--
 .../time.cal.ym.nonmembers/ostream.pass.cpp   | 15 ++--
 .../ostream.pass.cpp                          | 15 ++--
 .../time.cal.ymwd.nonmembers/ostream.pass.cpp |  5 +-
 .../ostream.pass.cpp                          |  5 +-
 .../std/time/time.syn/formatter.day.pass.cpp  | 21 +++---
 .../time/time.syn/formatter.duration.pass.cpp | 47 ++++++------
 .../time.syn/formatter.file_time.pass.cpp     | 73 ++++++++++---------
 .../time/time.syn/formatter.hh_mm_ss.pass.cpp | 25 ++++---
 .../time.syn/formatter.local_time.pass.cpp    | 71 +++++++++---------
 .../time/time.syn/formatter.month.pass.cpp    | 17 +++--
 .../time.syn/formatter.month_day.pass.cpp     | 37 +++++-----
 .../formatter.month_day_last.pass.cpp         | 21 +++---
 .../time.syn/formatter.month_weekday.pass.cpp | 27 ++++---
 .../time/time.syn/formatter.sys_time.pass.cpp | 71 +++++++++---------
 .../time/time.syn/formatter.weekday.pass.cpp  |  7 +-
 .../time.syn/formatter.weekday_index.pass.cpp | 11 ++-
 .../time.syn/formatter.weekday_last.pass.cpp  | 11 ++-
 .../std/time/time.syn/formatter.year.pass.cpp | 19 +++--
 .../time.syn/formatter.year_month.pass.cpp    | 55 +++++++-------
 .../formatter.year_month_day.pass.cpp         | 61 ++++++++--------
 .../formatter.year_month_day_last.pass.cpp    | 45 ++++++------
 .../formatter.year_month_weekday.pass.cpp     | 39 +++++-----
 libcxx/test/support/locale_helpers.h          |  8 +-
 libcxx/test/support/platform_support.h        |  7 ++
 libcxx/utils/libcxx/test/features.py          |  4 +
 64 files changed, 608 insertions(+), 473 deletions(-)

diff --git a/libcxx/test/std/input.output/iostream.format/ext.manip/get_money.pass.cpp b/libcxx/test/std/input.output/iostream.format/ext.manip/get_money.pass.cpp
index 88672851f7b6..3e344477f3ba 100644
--- a/libcxx/test/std/input.output/iostream.format/ext.manip/get_money.pass.cpp
+++ b/libcxx/test/std/input.output/iostream.format/ext.manip/get_money.pass.cpp
@@ -46,7 +46,7 @@ public:
 int main(int, char**)
 {
     {
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         testbuf<char> sb("  ($1,234,567.89)");
 #else
         testbuf<char> sb("  -$1,234,567.89");
@@ -58,8 +58,8 @@ int main(int, char**)
         assert(x == -123456789);
     }
     {
-#if defined(_WIN32)
-        testbuf<char> sb("  (USD 1,234,567.89)");
+#if defined(WINLOCALE)
+      testbuf<char> sb("  (USD 1,234,567.89)");
 #else
         testbuf<char> sb("  -USD 1,234,567.89");
 #endif
@@ -71,28 +71,28 @@ int main(int, char**)
     }
 #ifndef TEST_HAS_NO_WIDE_CHARACTERS
     {
-#if defined(_WIN32)
-        testbuf<wchar_t> sb(L"  ($1,234,567.89)");
-#else
-        testbuf<wchar_t> sb(L"  -$1,234,567.89");
-#endif
-        std::wistream is(&sb);
-        is.imbue(std::locale(LOCALE_en_US_UTF_8));
-        long double x = 0;
-        is >> std::get_money(x, false);
-        assert(x == -123456789);
+#  if defined(WINLOCALE)
+      testbuf<wchar_t> sb(L"  ($1,234,567.89)");
+#  else
+      testbuf<wchar_t> sb(L"  -$1,234,567.89");
+#  endif
+      std::wistream is(&sb);
+      is.imbue(std::locale(LOCALE_en_US_UTF_8));
+      long double x = 0;
+      is >> std::get_money(x, false);
+      assert(x == -123456789);
     }
     {
-#if defined(_WIN32)
-        testbuf<wchar_t> sb(L"  (USD 1,234,567.89)");
-#else
-        testbuf<wchar_t> sb(L"  -USD 1,234,567.89");
-#endif
-        std::wistream is(&sb);
-        is.imbue(std::locale(LOCALE_en_US_UTF_8));
-        long double x = 0;
-        is >> std::get_money(x, true);
-        assert(x == -123456789);
+#  if defined(WINLOCALE)
+      testbuf<wchar_t> sb(L"  (USD 1,234,567.89)");
+#  else
+      testbuf<wchar_t> sb(L"  -USD 1,234,567.89");
+#  endif
+      std::wistream is(&sb);
+      is.imbue(std::locale(LOCALE_en_US_UTF_8));
+      long double x = 0;
+      is >> std::get_money(x, true);
+      assert(x == -123456789);
     }
 #endif
 
diff --git a/libcxx/test/std/input.output/iostream.format/ext.manip/put_money.pass.cpp b/libcxx/test/std/input.output/iostream.format/ext.manip/put_money.pass.cpp
index d0ff2c87689d..bbfa4c29fccc 100644
--- a/libcxx/test/std/input.output/iostream.format/ext.manip/put_money.pass.cpp
+++ b/libcxx/test/std/input.output/iostream.format/ext.manip/put_money.pass.cpp
@@ -13,6 +13,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.en_US.UTF-8
 
 #include <iomanip>
@@ -63,7 +66,7 @@ int main(int, char**)
         std::showbase(os);
         long double x = -123456789;
         os << std::put_money(x, false);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(sb.str() == "($1,234,567.89)");
 #else
         assert(sb.str() == "-$1,234,567.89");
@@ -76,7 +79,7 @@ int main(int, char**)
         std::showbase(os);
         long double x = -123456789;
         os << std::put_money(x, true);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(sb.str() == "(USD1,234,567.89)");
 #else
         assert(sb.str() == "-USD 1,234,567.89");
@@ -90,7 +93,7 @@ int main(int, char**)
         std::showbase(os);
         long double x = -123456789;
         os << std::put_money(x, false);
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(sb.str() == L"($1,234,567.89)");
 #else
         assert(sb.str() == L"-$1,234,567.89");
@@ -103,7 +106,7 @@ int main(int, char**)
         std::showbase(os);
         long double x = -123456789;
         os << std::put_money(x, true);
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(sb.str() == L"(USD1,234,567.89)");
 #else
         assert(sb.str() == L"-USD 1,234,567.89");
diff --git a/libcxx/test/std/input.output/iostream.format/std.manip/setfill_wchar_max.pass.cpp b/libcxx/test/std/input.output/iostream.format/std.manip/setfill_wchar_max.pass.cpp
index b24c0b90d86f..9bf49b7bb5b8 100644
--- a/libcxx/test/std/input.output/iostream.format/std.manip/setfill_wchar_max.pass.cpp
+++ b/libcxx/test/std/input.output/iostream.format/std.manip/setfill_wchar_max.pass.cpp
@@ -14,7 +14,7 @@
 // WCHAR_MAX with the libcpp ABI version 1 implementation. The libcpp ABI
 // version 2 implementation fixes the problem.
 
-// XFAIL: target={{.*}}-windows{{.*}} && libcpp-abi-version=1
+// XFAIL: target={{.*}}-windows{{.*}} && libcpp-abi-version=1 && !cygwin
 // XFAIL: target=armv{{7|8}}{{l?}}{{.*}}-linux-gnueabihf && libcpp-abi-version=1
 // XFAIL: target=aarch64{{.*}}-linux-gnu && libcpp-abi-version=1
 // XFAIL: target=aarch64{{.*}}-amazon-linux && libcpp-abi-version=1
diff --git a/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcerr-wide-mode.sh.cpp b/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcerr-wide-mode.sh.cpp
index f23fbee92afd..249db368895e 100644
--- a/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcerr-wide-mode.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcerr-wide-mode.sh.cpp
@@ -12,6 +12,7 @@
 
 // UNSUPPORTED: no-wide-characters
 // REQUIRES: target={{.+}}-windows-{{.+}}
+// XFAIL: cygwin
 
 // FILE_DEPENDENCIES: test.dat
 // RUN: %{build}
diff --git a/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcin-wide-mode.sh.cpp b/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcin-wide-mode.sh.cpp
index e13d79605f11..4eed763bfecb 100644
--- a/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcin-wide-mode.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcin-wide-mode.sh.cpp
@@ -12,6 +12,7 @@
 
 // UNSUPPORTED: no-wide-characters
 // REQUIRES: target={{.+}}-windows-{{.+}}
+// XFAIL: cygwin
 
 // FILE_DEPENDENCIES: test.dat
 // RUN: %{build}
diff --git a/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcout-wide-mode.sh.cpp b/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcout-wide-mode.sh.cpp
index 9908ea0e64db..12acabd16c3f 100644
--- a/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcout-wide-mode.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/wide.stream.objects/wcout-wide-mode.sh.cpp
@@ -12,6 +12,7 @@
 
 // UNSUPPORTED: no-wide-characters
 // REQUIRES: target={{.+}}-windows-{{.+}}
+// XFAIL: cygwin
 
 // FILE_DEPENDENCIES: test.dat
 // RUN: %{build}
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp
index 1bd9fc88c72d..0c53596d3cf9 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp
@@ -22,6 +22,7 @@
 #include <cassert>
 
 #include "test_macros.h"
+#include "platform_support.h" // locale name macros
 
 int main(int, char**)
 {
@@ -42,7 +43,7 @@ int main(int, char**)
 #if defined(_MSVC_STL_VERSION)
         // MS STL includes the _SPACE bit in F::blank
         bool expect_blank = (9 <= i && i <= 13) || (i == ' ');
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
         // The _BLANK bit isn't set for '\t' on Windows
         bool expect_blank = (i == ' ');
 #else
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_1.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_1.pass.cpp
index 5cebc079c470..30d1940d1de6 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_1.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_1.pass.cpp
@@ -109,7 +109,7 @@ int main(int, char**)
             assert(f.is(F::graph, L'.'));
             assert(!f.is(F::graph,  L'\x07'));
 
-#if defined(_WIN32)
+#if defined(WINLOCALE)
             // On Windows, these wchars are classified according to their
             // Unicode interpretation even in the "C" locale.
             assert(f.is(F::alpha, L'\x00DA'));
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_many.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_many.pass.cpp
index 2869378b42b9..519785262823 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_many.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/is_many.pass.cpp
@@ -157,7 +157,7 @@ int main(int, char**)
             assert(!(m[0] & F::punct));
             assert(!(m[0] & F::xdigit));
             assert(!(m[0] & F::blank));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
             // On Windows, these wchars are classified according to their
             // Unicode interpretation even in the "C" locale.
             assert( (m[0] & F::alpha));
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_is.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_is.pass.cpp
index ea03f042f2d4..b3d9ce415652 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_is.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_is.pass.cpp
@@ -65,7 +65,7 @@ int main(int, char**)
             assert(f.scan_is(F::punct, in.data(), in.data() + in.size()) - in.data() == 4);
             assert(f.scan_is(F::xdigit, in.data(), in.data() + in.size()) - in.data() == 2);
             assert(f.scan_is(F::blank, in.data(), in.data() + in.size()) - in.data() == 1);
-#if !defined(_WIN32)
+#if !defined(WINLOCALE)
             // On Windows, these wchars are classified according to their
             // Unicode interpretation even in the "C" locale, where
             // the scan_is function returns the same as above for the
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_not.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_not.pass.cpp
index 2f7acb843e59..9a002ef16034 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_not.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/scan_not.pass.cpp
@@ -65,7 +65,7 @@ int main(int, char**)
             assert(f.scan_not(F::punct, in.data(), in.data() + in.size()) - in.data() == 0);
             assert(f.scan_not(F::xdigit, in.data(), in.data() + in.size()) - in.data() == 0);
             assert(f.scan_not(F::blank, in.data(), in.data() + in.size()) - in.data() == 0);
-#if !defined(_WIN32)
+#if !defined(WINLOCALE)
             // On Windows, these wchars are classified according to their
             // Unicode interpretation even in the "C" locale, where
             // the scan_is function returns the same as above for the
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_1.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_1.pass.cpp
index 447353de8af7..9bcc234ddc91 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_1.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_1.pass.cpp
@@ -12,6 +12,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // <locale>
 
 // template <class charT> class ctype_byname;
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_many.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_many.pass.cpp
index 94ecc6c8fa85..8a55163f1bdb 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_many.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/tolower_many.pass.cpp
@@ -12,6 +12,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // <locale>
 
 // template <class charT> class ctype_byname;
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_1.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_1.pass.cpp
index 2b37737a26bc..cb09a443de77 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_1.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_1.pass.cpp
@@ -12,6 +12,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // <locale>
 
 // template <class charT> class ctype_byname;
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_many.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_many.pass.cpp
index 016d8d736ad2..df85b1670074 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_many.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/toupper_many.pass.cpp
@@ -12,6 +12,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // <locale>
 
 // template <class charT> class ctype_byname;
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_1.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_1.pass.cpp
index 959a4be9e1de..085ae20d1a0f 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_1.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_1.pass.cpp
@@ -56,7 +56,7 @@ int main(int, char**)
             assert(f.widen('.') == L'.');
             assert(f.widen('a') == L'a');
             assert(f.widen('1') == L'1');
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(_WIN32) || defined(_AIX)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(WINLOCALE) || defined(_AIX)
             assert(f.widen(char(-5)) == L'\u00fb');
 #else
             assert(f.widen(char(-5)) == wchar_t(-1));
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_many.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_many.pass.cpp
index 078b4a6fefb7..fd9eb59b9eb5 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_many.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/locale.ctype.byname/widen_many.pass.cpp
@@ -62,7 +62,7 @@ int main(int, char**)
             assert(v[3] == L'.');
             assert(v[4] == L'a');
             assert(v[5] == L'1');
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(_WIN32) || defined(_AIX)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(WINLOCALE) || defined(_AIX)
             assert(v[6] == L'\xfb');
 #else
             assert(v[6] == wchar_t(-1));
diff --git a/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_long_double_en_US.pass.cpp b/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_long_double_en_US.pass.cpp
index 4b767fae871f..645e7aaeb812 100644
--- a/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_long_double_en_US.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_long_double_en_US.pass.cpp
@@ -16,6 +16,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.en_US.UTF-8
 
 #include <locale>
@@ -78,7 +81,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(0.01)");
 #else
         assert(ex == "-0.01");
@@ -96,7 +99,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(1,234,567.89)");
 #else
         assert(ex == "-1,234,567.89");
@@ -116,7 +119,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "($0.01)");
 #else
         assert(ex == "-$0.01");
@@ -136,7 +139,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "($1,234,567.89)");
 #else
         assert(ex == "-$1,234,567.89");
@@ -150,7 +153,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, ' ', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "($1,234,567.89)     ");
 #else
         assert(ex == "-$1,234,567.89      ");
@@ -165,7 +168,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, ' ', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "($     1,234,567.89)");
 #else
         assert(ex == "-$      1,234,567.89");
@@ -180,7 +183,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, ' ', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "     ($1,234,567.89)");
 #else
         assert(ex == "      -$1,234,567.89");
@@ -203,7 +206,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(0.01)");
 #else
         assert(ex == "-0.01");
@@ -221,7 +224,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(1,234,567.89)");
 #else
         assert(ex == "-1,234,567.89");
@@ -233,7 +236,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "USD0.00");
 #else
         assert(ex == "USD 0.00");
@@ -245,7 +248,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(USD0.01)");
 #else
         assert(ex == "-USD 0.01");
@@ -257,7 +260,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "USD1,234,567.89");
 #else
         assert(ex == "USD 1,234,567.89");
@@ -269,7 +272,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(USD1,234,567.89)");
 #else
         assert(ex == "-USD 1,234,567.89");
@@ -283,7 +286,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, ' ', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(USD1,234,567.89)   ");
 #else
         assert(ex == "-USD 1,234,567.89   ");
@@ -298,7 +301,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, ' ', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "(USD   1,234,567.89)");
 #else
         assert(ex == "-USD    1,234,567.89");
@@ -313,7 +316,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, ' ', v);
         std::string ex(str, base(iter));
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(ex == "   (USD1,234,567.89)");
 #else
         assert(ex == "   -USD 1,234,567.89");
@@ -339,7 +342,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(0.01)");
 #else
         assert(ex == L"-0.01");
@@ -357,7 +360,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(1,234,567.89)");
 #else
         assert(ex == L"-1,234,567.89");
@@ -377,7 +380,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"($0.01)");
 #else
         assert(ex == L"-$0.01");
@@ -397,7 +400,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"($1,234,567.89)");
 #else
         assert(ex == L"-$1,234,567.89");
@@ -411,7 +414,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"($1,234,567.89)     ");
 #else
         assert(ex == L"-$1,234,567.89      ");
@@ -426,7 +429,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"($     1,234,567.89)");
 #else
         assert(ex == L"-$      1,234,567.89");
@@ -441,7 +444,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"     ($1,234,567.89)");
 #else
         assert(ex == L"      -$1,234,567.89");
@@ -464,7 +467,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(0.01)");
 #else
         assert(ex == L"-0.01");
@@ -482,7 +485,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(1,234,567.89)");
 #else
         assert(ex == L"-1,234,567.89");
@@ -494,7 +497,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"USD0.00");
 #else
         assert(ex == L"USD 0.00");
@@ -506,7 +509,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(USD0.01)");
 #else
         assert(ex == L"-USD 0.01");
@@ -518,7 +521,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"USD1,234,567.89");
 #else
         assert(ex == L"USD 1,234,567.89");
@@ -530,7 +533,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(USD1,234,567.89)");
 #else
         assert(ex == L"-USD 1,234,567.89");
@@ -544,7 +547,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(USD1,234,567.89)   ");
 #else
         assert(ex == L"-USD 1,234,567.89   ");
@@ -559,7 +562,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"(USD   1,234,567.89)");
 #else
         assert(ex == L"-USD    1,234,567.89");
@@ -574,7 +577,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(ex == L"   (USD1,234,567.89)");
 #else
         assert(ex == L"   -USD 1,234,567.89");
diff --git a/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_string_en_US.pass.cpp b/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_string_en_US.pass.cpp
index 1c8710a008f2..c038f0dbebc0 100644
--- a/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_string_en_US.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.monetary/locale.money.put/locale.money.put.members/put_string_en_US.pass.cpp
@@ -16,6 +16,9 @@
 // Bionic has minimal locale support, investigate this later.
 // XFAIL: LIBCXX-ANDROID-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.en_US.UTF-8
 
 #include <locale>
@@ -78,7 +81,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(0.01)");
 #else
         assert(ex == "-0.01");
@@ -96,7 +99,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(1,234,567.89)");
 #else
         assert(ex == "-1,234,567.89");
@@ -116,7 +119,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "($0.01)");
 #else
         assert(ex == "-$0.01");
@@ -136,7 +139,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "($1,234,567.89)");
 #else
         assert(ex == "-$1,234,567.89");
@@ -150,7 +153,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, ' ', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "($1,234,567.89)     ");
 #else
         assert(ex == "-$1,234,567.89      ");
@@ -165,7 +168,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, ' ', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "($     1,234,567.89)");
 #else
         assert(ex == "-$      1,234,567.89");
@@ -180,7 +183,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), false, ios, ' ', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "     ($1,234,567.89)");
 #else
         assert(ex == "      -$1,234,567.89");
@@ -203,7 +206,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(0.01)");
 #else
         assert(ex == "-0.01");
@@ -221,7 +224,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(1,234,567.89)");
 #else
         assert(ex == "-1,234,567.89");
@@ -233,7 +236,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "USD0.00");
 #else
         assert(ex == "USD 0.00");
@@ -245,7 +248,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(USD0.01)");
 #else
         assert(ex == "-USD 0.01");
@@ -257,7 +260,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "USD1,234,567.89");
 #else
         assert(ex == "USD 1,234,567.89");
@@ -269,7 +272,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, '*', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(USD1,234,567.89)");
 #else
         assert(ex == "-USD 1,234,567.89");
@@ -283,7 +286,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, ' ', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(USD1,234,567.89)   ");
 #else
         assert(ex == "-USD 1,234,567.89   ");
@@ -298,7 +301,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, ' ', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "(USD   1,234,567.89)");
 #else
         assert(ex == "-USD    1,234,567.89");
@@ -313,7 +316,7 @@ int main(int, char**)
         char str[100];
         cpp17_output_iterator<char*> iter = f.put(cpp17_output_iterator<char*>(str), true, ios, ' ', v);
         std::string ex(str, base(iter));
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(ex == "   (USD1,234,567.89)");
 #else
         assert(ex == "   -USD 1,234,567.89");
@@ -339,7 +342,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(0.01)");
 #else
         assert(ex == L"-0.01");
@@ -357,7 +360,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(1,234,567.89)");
 #else
         assert(ex == L"-1,234,567.89");
@@ -377,7 +380,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"($0.01)");
 #else
         assert(ex == L"-$0.01");
@@ -397,7 +400,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"($1,234,567.89)");
 #else
         assert(ex == L"-$1,234,567.89");
@@ -411,7 +414,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"($1,234,567.89)     ");
 #else
         assert(ex == L"-$1,234,567.89      ");
@@ -426,7 +429,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"($     1,234,567.89)");
 #else
         assert(ex == L"-$      1,234,567.89");
@@ -441,7 +444,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), false, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"     ($1,234,567.89)");
 #else
         assert(ex == L"      -$1,234,567.89");
@@ -464,7 +467,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(0.01)");
 #else
         assert(ex == L"-0.01");
@@ -482,7 +485,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(1,234,567.89)");
 #else
         assert(ex == L"-1,234,567.89");
@@ -494,7 +497,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"USD0.00");
 #else
         assert(ex == L"USD 0.00");
@@ -506,7 +509,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(USD0.01)");
 #else
         assert(ex == L"-USD 0.01");
@@ -518,7 +521,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"USD1,234,567.89");
 #else
         assert(ex == L"USD 1,234,567.89");
@@ -530,7 +533,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, '*', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(USD1,234,567.89)");
 #else
         assert(ex == L"-USD 1,234,567.89");
@@ -544,7 +547,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(USD1,234,567.89)   ");
 #else
         assert(ex == L"-USD 1,234,567.89   ");
@@ -559,7 +562,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"(USD   1,234,567.89)");
 #else
         assert(ex == L"-USD    1,234,567.89");
@@ -574,7 +577,7 @@ int main(int, char**)
         wchar_t str[100];
         cpp17_output_iterator<wchar_t*> iter = f.put(cpp17_output_iterator<wchar_t*>(str), true, ios, ' ', v);
         std::wstring ex(str, base(iter));
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(ex == L"   (USD1,234,567.89)");
 #else
         assert(ex == L"   -USD 1,234,567.89");
diff --git a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/curr_symbol.pass.cpp b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/curr_symbol.pass.cpp
index 9c1253d47acd..2bd28c71e709 100644
--- a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/curr_symbol.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/curr_symbol.pass.cpp
@@ -12,6 +12,9 @@
 // NetBSD does not support LC_MONETARY at the moment
 // XFAIL: netbsd
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.en_US.UTF-8
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ru_RU.UTF-8
@@ -86,7 +89,7 @@ int main(int, char**)
     }
 #endif
 
-#ifdef _WIN32
+#ifdef WINLOCALE
     std::string curr_space = "";
 #else
     std::string curr_space = " ";
@@ -100,7 +103,7 @@ int main(int, char**)
         assert(f.curr_symbol() == "USD" + curr_space);
     }
 #ifndef TEST_HAS_NO_WIDE_CHARACTERS
-#ifdef _WIN32
+#  ifdef WINLOCALE
     std::wstring w_curr_space = L"";
 #else
     std::wstring w_curr_space = L" ";
@@ -164,7 +167,7 @@ int main(int, char**)
 
     {
         Fnf f(LOCALE_zh_CN_UTF_8, 1);
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert(f.curr_symbol() == "\xC2\xA5"); // \u00A5
 #else
         assert(f.curr_symbol() == "\xEF\xBF\xA5"); // \uFFE5
@@ -177,7 +180,7 @@ int main(int, char**)
 #ifndef TEST_HAS_NO_WIDE_CHARACTERS
     {
         Fwf f(LOCALE_zh_CN_UTF_8, 1);
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert(f.curr_symbol() == L"\u00A5");
 #else
         assert(f.curr_symbol() == L"\uFFE5");
diff --git a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/neg_format.pass.cpp b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/neg_format.pass.cpp
index a3e3d853524b..eea0c7035abc 100644
--- a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/neg_format.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/neg_format.pass.cpp
@@ -220,7 +220,7 @@ int main(int, char**)
     {
         Fnt f(LOCALE_zh_CN_UTF_8, 1);
         std::money_base::pattern p = f.neg_format();
-#if defined(_WIN32) || defined(__APPLE__)
+#if defined(WINLOCALE) || defined(__APPLE__)
         assert_symbol_sign_none_value(p);
 #else
         assert_sign_symbol_none_value(p);
@@ -239,7 +239,7 @@ int main(int, char**)
     {
         Fwt f(LOCALE_zh_CN_UTF_8, 1);
         std::money_base::pattern p = f.neg_format();
-#if defined(_WIN32) || defined(__APPLE__)
+#  if defined(WINLOCALE) || defined(__APPLE__)
         assert_symbol_sign_none_value(p);
 #else
         assert_sign_symbol_none_value(p);
diff --git a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/negative_sign.pass.cpp b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/negative_sign.pass.cpp
index be2f5585d069..6c19bca92b10 100644
--- a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/negative_sign.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/negative_sign.pass.cpp
@@ -81,7 +81,7 @@ int main(int, char**)
 
     {
         Fnf f(LOCALE_en_US_UTF_8, 1);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(f.negative_sign() == "()");
 #else
         assert(f.negative_sign() == "-");
@@ -89,7 +89,7 @@ int main(int, char**)
     }
     {
         Fnt f(LOCALE_en_US_UTF_8, 1);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         assert(f.negative_sign() == "()");
 #else
         assert(f.negative_sign() == "-");
@@ -98,7 +98,7 @@ int main(int, char**)
 #ifndef TEST_HAS_NO_WIDE_CHARACTERS
     {
         Fwf f(LOCALE_en_US_UTF_8, 1);
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(f.negative_sign() == L"()");
 #else
         assert(f.negative_sign() == L"-");
@@ -106,7 +106,7 @@ int main(int, char**)
     }
     {
         Fwt f(LOCALE_en_US_UTF_8, 1);
-#if defined(_WIN32)
+#  if defined(WINLOCALE)
         assert(f.negative_sign() == L"()");
 #else
         assert(f.negative_sign() == L"-");
diff --git a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/pos_format.pass.cpp b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/pos_format.pass.cpp
index 671620a0c2f9..2fdbcab53a81 100644
--- a/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/pos_format.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.monetary/locale.moneypunct.byname/pos_format.pass.cpp
@@ -201,7 +201,7 @@ int main(int, char**)
     {
         Fnt f(LOCALE_zh_CN_UTF_8, 1);
         std::money_base::pattern p = f.pos_format();
-#ifdef _WIN32
+#ifdef WINLOCALE
         assert_symbol_sign_none_value(p);
 #else
         assert_sign_symbol_none_value(p);
@@ -220,7 +220,7 @@ int main(int, char**)
     {
         Fwt f(LOCALE_zh_CN_UTF_8, 1);
         std::money_base::pattern p = f.pos_format();
-#ifdef _WIN32
+#  ifdef WINLOCALE
         assert_symbol_sign_none_value(p);
 #else
         assert_sign_symbol_none_value(p);
diff --git a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date.pass.cpp b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date.pass.cpp
index 3f53490c1bae..c0052c9f8b98 100644
--- a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date.pass.cpp
@@ -62,7 +62,7 @@ int main(int, char**)
     }
     {
         const my_facet f(LOCALE_fr_FR_UTF_8, 1);
-#if defined(_WIN32) || defined(TEST_HAS_GLIBC) || defined(_AIX)
+#if defined(WINLOCALE) || defined(TEST_HAS_GLIBC) || defined(_AIX)
         const char in[] = "10/06/2009";
 #else
         const char in[] = "10.06.2009";
diff --git a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date_wide.pass.cpp b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date_wide.pass.cpp
index 3e20193d4af0..90ec80239e49 100644
--- a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date_wide.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_date_wide.pass.cpp
@@ -62,7 +62,7 @@ int main(int, char**)
     }
     {
         const my_facet f(LOCALE_fr_FR_UTF_8, 1);
-#if defined(_WIN32) || defined(TEST_HAS_GLIBC) || defined(_AIX)
+#if defined(WINLOCALE) || defined(TEST_HAS_GLIBC) || defined(_AIX)
         const wchar_t in[] = L"10/06/2009";
 #else
         const wchar_t in[] = L"10.06.2009";
diff --git a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one.pass.cpp b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one.pass.cpp
index 513f92bc3faf..45164e4b7cd7 100644
--- a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one.pass.cpp
@@ -11,6 +11,9 @@
 
 // XFAIL: LIBCXX-FREEBSD-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.en_US.UTF-8
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ru_RU.UTF-8
@@ -51,7 +54,7 @@ int main(int, char**)
     std::tm t;
     {
         const my_facet f(LOCALE_en_US_UTF_8, 1);
-#ifdef _WIN32
+#ifdef WINLOCALE
         // On Windows, the "%c" format lacks the leading week day, which
         // means that t.tm_wday doesn't get set when parsing the string.
         const char in[] = "12/31/2061 11:55:59 PM";
@@ -72,14 +75,14 @@ int main(int, char**)
         assert(t.tm_mday == 31);
         assert(t.tm_mon == 11);
         assert(t.tm_year == 161);
-#if !defined(_WIN32) && !defined(_AIX)
+#if !defined(WINLOCALE) && !defined(_AIX)
         assert(t.tm_wday == 6);
 #endif
         assert(err == std::ios_base::eofbit);
     }
     {
         const my_facet f(LOCALE_en_US_UTF_8, 1);
-#if defined(_WIN32) || defined(TEST_HAS_GLIBC) || defined(_AIX)
+#if defined(WINLOCALE) || defined(TEST_HAS_GLIBC) || defined(_AIX)
         const char in[] = "11:55:59 PM";
 #else
         const char in[] = "23:55:59";
@@ -95,7 +98,7 @@ int main(int, char**)
     }
     {
         const my_facet f(LOCALE_fr_FR_UTF_8, 1);
-#ifdef _WIN32
+#ifdef WINLOCALE
         const char in[] = "31/12/2061 23:55:59";
 #elif defined(TEST_HAS_GLIBC)
         const char in[] = "sam. 31 d""\xC3\xA9""c. 2061 23:55:59";
@@ -114,7 +117,7 @@ int main(int, char**)
         assert(t.tm_mday == 31);
         assert(t.tm_mon == 11);
         assert(t.tm_year == 161);
-#if !defined(_WIN32) && !defined(_AIX)
+#if !defined(WINLOCALE) && !defined(_AIX)
         assert(t.tm_wday == 6);
 #endif
         assert(err == std::ios_base::eofbit);
@@ -135,7 +138,7 @@ int main(int, char**)
         const my_facet f(LOCALE_ru_RU_UTF_8, 1);
 #ifdef TEST_HAS_GLIBC
         const char in[] = "\xD0\xA1\xD0\xB1 31 \xD0\xB4\xD0\xB5\xD0\xBA 2061 23:55:59";
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
         const char in[] = "31.12.2061 23:55:59";
 #elif defined(_AIX)
         const char in[] = "31 \xD0\xB4\xD0\xB5\xD0\xBA. 2061 \xD0\xB3., 23:55:59";
@@ -159,7 +162,7 @@ int main(int, char**)
         assert(t.tm_mday == 31);
         assert(t.tm_mon == 11);
         assert(t.tm_year == 161);
-#if !defined(_WIN32) && !defined(_AIX)
+#if !defined(WINLOCALE) && !defined(_AIX)
         assert(t.tm_wday == 6);
 #endif
         assert(err == std::ios_base::eofbit);
@@ -184,7 +187,7 @@ int main(int, char**)
                           "\xE6\x98\x9F\xE6\x9c\x9F\xE5\x85\xAD"
                           " 23" "\xE6\x97\xB6" "55" "\xE5\x88\x86" "59"
                           "\xE7\xA7\x92";
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
         const char in[] = "2061/12/31 23:55:59";
 #elif defined(_AIX)
         // The time field is omitted in the definition below because in the
@@ -209,7 +212,7 @@ int main(int, char**)
         assert(t.tm_mday == 31);
         assert(t.tm_mon == 11);
         assert(t.tm_year == 161);
-#if !defined(_WIN32) && !defined(_AIX)
+#if !defined(WINLOCALE) && !defined(_AIX)
         assert(t.tm_wday == 6);
 #endif
 #if !defined(_AIX)
@@ -218,7 +221,7 @@ int main(int, char**)
     }
     {
         const my_facet f(LOCALE_zh_CN_UTF_8, 1);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
         const char in[] = "23:55:59";
 #elif defined(_AIX)
         const char in[] = "\xE4\xB8\x8B\xE5\x8D\x88" "11:55:59";
diff --git a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one_wide.pass.cpp b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one_wide.pass.cpp
index f3a09fe51373..0ce587fb0989 100644
--- a/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one_wide.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.time/locale.time.get.byname/get_one_wide.pass.cpp
@@ -11,6 +11,9 @@
 
 // XFAIL: LIBCXX-FREEBSD-FIXME
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // XFAIL: no-wide-characters
 
 // REQUIRES: locale.en_US.UTF-8
@@ -51,7 +54,7 @@ int main(int, char**)
     std::tm t;
     {
         const my_facet f(LOCALE_en_US_UTF_8, 1);
-#ifdef _WIN32
+#ifdef WINLOCALE
         // On Windows, the "%c" format lacks the leading week day, which
         // means that t.tm_wday doesn't get set when parsing the string.
         const wchar_t in[] = L"12/31/2061 11:55:59 PM";
@@ -72,14 +75,14 @@ int main(int, char**)
         assert(t.tm_mday == 31);
         assert(t.tm_mon == 11);
         assert(t.tm_year == 161);
-#if !defined(_WIN32) && !defined(_AIX)
+#if !defined(WINLOCALE) && !defined(_AIX)
         assert(t.tm_wday == 6);
 #endif
         assert(err == std::ios_base::eofbit);
     }
     {
         const my_facet f(LOCALE_en_US_UTF_8, 1);
-#if defined(_WIN32) || defined(TEST_HAS_GLIBC) || defined(_AIX)
+#if defined(WINLOCALE) || defined(TEST_HAS_GLIBC) || defined(_AIX)
         const wchar_t in[] = L"11:55:59 PM";
 #else
         const wchar_t in[] = L"23:55:59";
@@ -95,7 +98,7 @@ int main(int, char**)
     }
     {
         const my_facet f(LOCALE_fr_FR_UTF_8, 1);
-#ifdef _WIN32
+#ifdef WINLOCALE
         const wchar_t in[] = L"31/12/2061 23:55:59";
 #elif defined(TEST_HAS_GLIBC)
         const wchar_t in[] = L"sam. 31 d" L"\xE9" L"c. 2061 23:55:59";
@@ -114,7 +117,7 @@ int main(int, char**)
         assert(t.tm_mday == 31);
         assert(t.tm_mon == 11);
         assert(t.tm_year == 161);
-#if !defined(_WIN32) && !defined(_AIX)
+#if !defined(WINLOCALE) && !defined(_AIX)
         assert(t.tm_wday == 6);
 #endif
         assert(err == std::ios_base::eofbit);
@@ -187,7 +190,7 @@ int main(int, char**)
 #endif
     {
         const my_facet f(LOCALE_zh_CN_UTF_8, 1);
-#ifdef _WIN32
+#ifdef WINLOCALE
         const wchar_t in[] = L"23:55:59";
 #elif defined(_AIX)
         const wchar_t in[] = L"\x4E0B\x5348" L"11:55:59";
diff --git a/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/grouping.pass.cpp b/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/grouping.pass.cpp
index a87c5e0ace28..d4741086d149 100644
--- a/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/grouping.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/grouping.pass.cpp
@@ -63,7 +63,7 @@ int main(int, char**)
     }
     {
         std::locale l(LOCALE_fr_FR_UTF_8);
-#if defined(TEST_HAS_GLIBC) || defined(_WIN32) || defined(_AIX)
+#if defined(TEST_HAS_GLIBC) || defined(WINLOCALE) || defined(_AIX)
         const char* const group = "\3";
 #else
         const char* const group = "\x7f";
diff --git a/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/thousands_sep.pass.cpp b/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/thousands_sep.pass.cpp
index ef39e8aa7b68..e5aa641b90aa 100644
--- a/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/thousands_sep.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/facet.numpunct/locale.numpunct.byname/thousands_sep.pass.cpp
@@ -69,8 +69,8 @@ int main(int, char**)
         // The below tests work around GLIBC's use of U202F as LC_NUMERIC thousands_sep.
         std::locale l(LOCALE_fr_FR_UTF_8);
         {
-#if defined(_CS_GNU_LIBC_VERSION) || defined(_WIN32) || defined(_AIX)
-            const char sep = ' ';
+#if defined(_CS_GNU_LIBC_VERSION) || defined(WINLOCALE) || defined(_AIX)
+          const char sep = ' ';
 #else
             const char sep = ',';
 #endif
diff --git a/libcxx/test/std/strings/string.conversions/stod.pass.cpp b/libcxx/test/std/strings/string.conversions/stod.pass.cpp
index bbe992fbc565..cba2c0f1fbbd 100644
--- a/libcxx/test/std/strings/string.conversions/stod.pass.cpp
+++ b/libcxx/test/std/strings/string.conversions/stod.pass.cpp
@@ -136,7 +136,10 @@ int main(int, char**) {
       std::size_t idx = 0;
       try {
         (void)std::stod(L"  - 8", &idx);
+#    ifndef __CYGWIN__
+        // Cygwin's wcstod consumes leading whitespace even if conversion failed
         assert(false);
+#    endif
       } catch (const std::invalid_argument&) {
         assert(idx == 0);
       }
diff --git a/libcxx/test/std/strings/string.conversions/stof.pass.cpp b/libcxx/test/std/strings/string.conversions/stof.pass.cpp
index 4ddeb8f95ede..cbb241d7bbfe 100644
--- a/libcxx/test/std/strings/string.conversions/stof.pass.cpp
+++ b/libcxx/test/std/strings/string.conversions/stof.pass.cpp
@@ -138,7 +138,10 @@ int main(int, char**) {
     std::size_t idx = 0;
     try {
       (void)std::stof(L"  - 8", &idx);
+#    ifndef __CYGWIN__
+      // Cygwin's wcstod consumes leading whitespace even if conversion failed
       assert(false);
+#    endif
     } catch (const std::invalid_argument&) {
       assert(idx == 0);
     }
diff --git a/libcxx/test/std/strings/string.conversions/stold.pass.cpp b/libcxx/test/std/strings/string.conversions/stold.pass.cpp
index ef756982ee9a..6da72c9f6059 100644
--- a/libcxx/test/std/strings/string.conversions/stold.pass.cpp
+++ b/libcxx/test/std/strings/string.conversions/stold.pass.cpp
@@ -122,7 +122,10 @@ int main(int, char**) {
     std::size_t idx = 0;
     try {
       (void)std::stold(L"  - 8", &idx);
+#    ifndef __CYGWIN__
+      // Cygwin's wcstod consumes leading whitespace even if conversion failed
       assert(false);
+#    endif
     } catch (const std::invalid_argument&) {
       assert(idx == 0);
     }
diff --git a/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.functions.tests.h b/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.functions.tests.h
index f55f0e2af8cb..4be955745083 100644
--- a/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.functions.tests.h
+++ b/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.functions.tests.h
@@ -22,7 +22,7 @@ void format_tests(TestFunction check, ExceptionTest check_exception) {
   std::thread::id input{};
 
   /***** Test the type specific part *****/
-#if !defined(__APPLE__) && !defined(__FreeBSD__)
+#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__CYGWIN__)
   check(SV("0"), SV("{}"), input);
   check(SV("0^42"), SV("{}^42"), input);
   check(SV("0^42"), SV("{:}^42"), input);
diff --git a/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.pass.cpp b/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.pass.cpp
index 39a257592809..46161b545c16 100644
--- a/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.pass.cpp
+++ b/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.id/format.pass.cpp
@@ -52,7 +52,7 @@ void test_format(StringViewT expected, std::thread::id arg) {
 
 template <class CharT>
 void test_fmt() {
-#if !defined(__APPLE__) && !defined(__FreeBSD__)
+#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__CYGWIN__)
   test_format(SV("0"), std::thread::id());
 #else
   test_format(SV("0x0"), std::thread::id());
diff --git a/libcxx/test/std/time/time.cal/time.cal.md/time.cal.md.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.md/time.cal.md.nonmembers/ostream.pass.cpp
index 681d97ee2695..129a017185b2 100644
--- a/libcxx/test/std/time/time.cal/time.cal.md/time.cal.md.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.md/time.cal.md.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -114,7 +117,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day{std::chrono::month{1}, 31d}), SV(" 1/31"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day{std::chrono::month{2}, 29d}), SV(" 2/29"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day{std::chrono::month{6}, 31d}), SV(" 6/31"));
-#elif defined(_WIN32) //  defined(__APPLE__)
+#elif defined(WINLOCALE) //  defined(__APPLE__)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day{std::chrono::month{1}, 255d}),
              SV("1/255 is not a valid day"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day{std::chrono::month{1}, 31d}), SV("1/31"));
diff --git a/libcxx/test/std/time/time.cal/time.cal.mdlast/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.mdlast/ostream.pass.cpp
index a4c9b1f79ee8..d35dba393ef2 100644
--- a/libcxx/test/std/time/time.cal/time.cal.mdlast/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.mdlast/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -106,7 +109,7 @@ static void test() {
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_day_last{std::chrono::month{1}}), SV("janv./last"));
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_day_last{std::chrono::month{2}}), SV("févr./last"));
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_day_last{std::chrono::month{3}}), SV("mars/last"));
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_day_last{std::chrono::month{4}}), SV("avr./last"));
 #  else
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_day_last{std::chrono::month{4}}), SV("avril/last"));
@@ -127,7 +130,7 @@ static void test() {
 
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{0}}),
              SV("0 is not a valid month/last"));
-#if defined(__APPLE__) || defined(_WIN32)
+#if defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(__APPLE__)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{1}}), SV(" 1/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{2}}), SV(" 2/last"));
@@ -152,7 +155,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{10}}), SV("10/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{11}}), SV("11/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{12}}), SV("12/last"));
-#else // defined(__APPLE__) || defined(_WIN32)
+#else // defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(_AIX)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{1}}), SV("1月/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{2}}), SV("2月/last"));
@@ -177,7 +180,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{10}}), SV("10月/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{11}}), SV("11月/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{12}}), SV("12月/last"));
-#endif   // defined(__APPLE__) || defined(_WIN32)
+#endif   // defined(__APPLE__) || defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{13}}),
              SV("13 is not a valid month/last"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_day_last{std::chrono::month{255}}),
diff --git a/libcxx/test/std/time/time.cal/time.cal.month/time.cal.month.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.month/time.cal.month.nonmembers/ostream.pass.cpp
index 8c94dad8d6df..9e50895e7b20 100644
--- a/libcxx/test/std/time/time.cal/time.cal.month/time.cal.month.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.month/time.cal.month.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -102,7 +105,7 @@ static void test() {
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month{1}), SV("janv."));
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month{2}), SV("févr."));
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month{3}), SV("mars"));
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month{4}), SV("avr."));
 #  else
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month{4}), SV("avril"));
@@ -120,7 +123,7 @@ static void test() {
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month{255}), SV("255 is not a valid month"));
 
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{0}), SV("0 is not a valid month"));
-#if defined(__APPLE__) || defined(_WIN32)
+#if defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(__APPLE__)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{1}), SV(" 1"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{2}), SV(" 2"));
@@ -145,7 +148,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{10}), SV("10"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{11}), SV("11"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{12}), SV("12"));
-#else // defined(__APPLE__)|| defined(_WIN32)
+#else // defined(__APPLE__)|| defined(WINLOCALE)
 #  if defined(_AIX)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{1}), SV("1月"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{2}), SV("2月"));
@@ -170,7 +173,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{10}), SV("10月"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{11}), SV("11月"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{12}), SV("12月"));
-#endif   // defined(__APPLE__)|| defined(_WIN32)
+#endif   // defined(__APPLE__)|| defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{13}), SV("13 is not a valid month"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month{255}), SV("255 is not a valid month"));
 }
diff --git a/libcxx/test/std/time/time.cal/time.cal.mwd/time.cal.mwd.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.mwd/time.cal.mwd.nonmembers/ostream.pass.cpp
index 5559d377ffd1..5c2a4b03c723 100644
--- a/libcxx/test/std/time/time.cal/time.cal.mwd/time.cal.mwd.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.mwd/time.cal.mwd.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -173,7 +176,7 @@ static void test() {
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{3}, std::chrono::weekday_indexed{std::chrono::weekday{3}, 3}}),
              SV("mars/mer.[3]"));
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{4}, std::chrono::weekday_indexed{std::chrono::weekday{4}, 4}}),
              SV("avr./jeu.[4]"));
@@ -217,7 +220,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{0}, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}}),
              SV("0 is not a valid month/日[1]"));
-#if defined(__APPLE__) || defined(_WIN32)
+#if defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(__APPLE__)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{1}, std::chrono::weekday_indexed{std::chrono::weekday{1}, 1}}),
@@ -284,7 +287,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{12}, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}}),
              SV("12/日[1]"));
-#else // defined(__APPLE__) || defined(_WIN32)
+#else // defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(_AIX)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{1}, std::chrono::weekday_indexed{std::chrono::weekday{1}, 1}}),
@@ -351,7 +354,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{12}, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}}),
              SV("12月/日[1]"));
-#endif   // defined(__APPLE__) || defined(_WIN32)
+#endif   // defined(__APPLE__) || defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday{
                  std::chrono::month{13}, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}}),
              SV("13 is not a valid month/日[1]"));
diff --git a/libcxx/test/std/time/time.cal/time.cal.mwdlast/time.cal.mwdlast.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.mwdlast/time.cal.mwdlast.nonmembers/ostream.pass.cpp
index 4834f2052448..71a0d1cfc3d8 100644
--- a/libcxx/test/std/time/time.cal/time.cal.mwdlast/time.cal.mwdlast.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.mwdlast/time.cal.mwdlast.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -170,15 +173,15 @@ static void test() {
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{3}, std::chrono::weekday_last{std::chrono::weekday{2}}}),
              SV("mars/mar.[last]"));
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{4}, std::chrono::weekday_last{std::chrono::weekday{3}}}),
              SV("avr./mer.[last]"));
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{4}, std::chrono::weekday_last{std::chrono::weekday{3}}}),
              SV("avril/mer.[last]"));
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{5}, std::chrono::weekday_last{std::chrono::weekday{4}}}),
              SV("mai/jeu.[last]"));
@@ -211,7 +214,7 @@ static void test() {
                  std::chrono::month{255}, std::chrono::weekday_last{std::chrono::weekday{8}}}),
              SV("255 is not a valid month/8 is not a valid weekday[last]"));
 
-#if defined(__APPLE__) || defined(_WIN32)
+#if defined(__APPLE__) || defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{0}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
              SV("0 is not a valid month/日[last]"));
@@ -281,7 +284,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{12}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
              SV("12/日[last]"));
-#else // defined(__APPLE__) || defined(_WIN32)
+#else // defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(_AIX)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{0}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
@@ -354,7 +357,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{12}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
              SV("12月/日[last]"));
-#endif   // defined(__APPLE__) || defined(_WIN32)
+#endif   // defined(__APPLE__) || defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::month_weekday_last{
                  std::chrono::month{13}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
              SV("13 is not a valid month/日[last]"));
diff --git a/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/ostream.pass.cpp
index b7dd71173cdb..dd5d6827d6bb 100644
--- a/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -133,13 +136,13 @@ static void test() {
              SV("-32767/févr."));
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month{std::chrono::year{0}, std::chrono::month{3}}),
              SV("0000/mars"));
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month{std::chrono::year{1970}, std::chrono::month{4}}),
              SV("1970/avr."));
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month{std::chrono::year{1970}, std::chrono::month{4}}),
              SV("1970/avril"));
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month{std::chrono::year{32'767}, std::chrono::month{5}}),
              SV("32767/mai"));
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month{std::chrono::year{0}, std::chrono::month{6}}),
@@ -164,7 +167,7 @@ static void test() {
 
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{-32'768}, std::chrono::month{0}}),
              SV("-32768 is not a valid year/0 is not a valid month"));
-#if defined(__APPLE__) || defined(_WIN32)
+#if defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(__APPLE__)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{-32'768}, std::chrono::month{1}}),
              SV("-32768 is not a valid year/ 1"));
@@ -210,7 +213,7 @@ static void test() {
              SV("0000/11"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{0}, std::chrono::month{12}}),
              SV("0000/12"));
-#else // defined(__APPLE__) || defined(_WIN32)
+#else // defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(_AIX)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{-32'768}, std::chrono::month{1}}),
              SV("-32768 is not a valid year/1月"));
@@ -256,7 +259,7 @@ static void test() {
              SV("0000/11月"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{0}, std::chrono::month{12}}),
              SV("0000/12月"));
-#endif   // defined(__APPLE__) || defined(_WIN32)
+#endif   // defined(__APPLE__) || defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{0}, std::chrono::month{13}}),
              SV("0000/13 is not a valid month"));
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month{std::chrono::year{-32'768}, std::chrono::month{255}}),
diff --git a/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/ostream.pass.cpp
index 2056b2a2416f..fab49553d6d2 100644
--- a/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -164,15 +167,15 @@ static void test() {
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{0}, std::chrono::month_day_last{std::chrono::month{3}}}),
              SV("0000/mars/last"));
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::month{4}}}),
              SV("1970/avr./last"));
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::month{4}}}),
              SV("1970/avril/last"));
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   TEST_EQUAL(stream_fr_FR_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{32'767}, std::chrono::month_day_last{std::chrono::month{5}}}),
              SV("32767/mai/last"));
@@ -208,7 +211,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{0}, std::chrono::month_day_last{std::chrono::month{0}}}),
              SV("0000/0 is not a valid month/last"));
-#if defined(__APPLE__) || defined(_WIN32)
+#if defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(__APPLE__)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{-32'768}, std::chrono::month_day_last{std::chrono::month{1}}}),
@@ -275,7 +278,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{0}, std::chrono::month_day_last{std::chrono::month{12}}}),
              SV("0000/12/last"));
-#else // defined(__APPLE__) || defined(_WIN32)
+#else // defined(__APPLE__) || defined(WINLOCALE)
 #  if defined(_AIX)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{-32'768}, std::chrono::month_day_last{std::chrono::month{1}}}),
@@ -342,7 +345,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{0}, std::chrono::month_day_last{std::chrono::month{12}}}),
              SV("0000/12月/last"));
-#endif   // defined(__APPLE__) || defined(_WIN32)
+#endif   // defined(__APPLE__) || defined(WINLOCALE)
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_day_last{
                  std::chrono::year{0}, std::chrono::month_day_last{std::chrono::month{13}}}),
              SV("0000/13 is not a valid month/last"));
diff --git a/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/ostream.pass.cpp
index d8bab676ab94..3ba775e412d7 100644
--- a/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -173,7 +176,7 @@ static void test() {
       stream_ja_JP_locale<CharT>(std::chrono::year_month_weekday{
           std::chrono::year{1970}, std::chrono::month{1}, std::chrono::weekday_indexed{std::chrono::weekday(0), 1}}),
       SV("1970/ 1/日[1]"));
-#elif defined(_WIN32) // defined(__APPLE__)
+#elif defined(WINLOCALE) // defined(__APPLE__)
   TEST_EQUAL(
       stream_ja_JP_locale<CharT>(std::chrono::year_month_weekday{
           std::chrono::year{-32'768}, std::chrono::month{1}, std::chrono::weekday_indexed{std::chrono::weekday(0), 1}}),
diff --git a/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/ostream.pass.cpp b/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/ostream.pass.cpp
index 77161da6c407..39cbcd46e61f 100644
--- a/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/ostream.pass.cpp
+++ b/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/ostream.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -154,7 +157,7 @@ static void test() {
   TEST_EQUAL(stream_ja_JP_locale<CharT>(std::chrono::year_month_weekday_last{
                  std::chrono::year{1970}, std::chrono::month{1}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
              SV("1970/ 1/日[last]"));
-#elif defined(_WIN32) // defined(__APPLE__)
+#elif defined(WINLOCALE) // defined(__APPLE__)
   TEST_EQUAL(
       stream_ja_JP_locale<CharT>(std::chrono::year_month_weekday_last{
           std::chrono::year{-32'768}, std::chrono::month{1}, std::chrono::weekday_last{std::chrono::weekday{0}}}),
diff --git a/libcxx/test/std/time/time.syn/formatter.day.pass.cpp b/libcxx/test/std/time/time.syn/formatter.day.pass.cpp
index 02dc215d35c5..6285ffb6b0c5 100644
--- a/libcxx/test/std/time/time.syn/formatter.day.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.day.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT Investigate Windows issues.
 // XFAIL: msvc
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -63,14 +66,14 @@ static void test_valid_values() {
   std::locale::global(std::locale(LOCALE_fr_FR_UTF_8));
 
   // Non localized output using C-locale
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(SV("%d=''\t%Od=''\t%e=''\t%Oe=''\n"), fmt, 0d);
 #else
   check(SV("%d='00'\t%Od='00'\t%e=' 0'\t%Oe=' 0'\n"), fmt, 0d);
 #endif
   check(SV("%d='01'\t%Od='01'\t%e=' 1'\t%Oe=' 1'\n"), fmt, 1d);
   check(SV("%d='31'\t%Od='31'\t%e='31'\t%Oe='31'\n"), fmt, 31d);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(SV("%d=''\t%Od=''\t%e=''\t%Oe=''\n"), fmt, 0d);
 #elif defined(_AIX)
   check(SV("%d='55'\t%Od='55'\t%e='55'\t%Oe='55'\n"), fmt, 255d);
@@ -79,14 +82,14 @@ static void test_valid_values() {
 #endif
 
   // Use the global locale (fr_FR)
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(SV("%d=''\t%Od=''\t%e=''\t%Oe=''\n"), lfmt, 0d);
 #else
   check(SV("%d='00'\t%Od='00'\t%e=' 0'\t%Oe=' 0'\n"), lfmt, 0d);
 #endif
   check(SV("%d='01'\t%Od='01'\t%e=' 1'\t%Oe=' 1'\n"), lfmt, 1d);
   check(SV("%d='31'\t%Od='31'\t%e='31'\t%Oe='31'\n"), lfmt, 31d);
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(SV("%d=''\t%Od=''\t%e=''\t%Oe=''\n"), lfmt, 255d);
 #elif defined(_AIX)
   check(SV("%d='55'\t%Od='55'\t%e='55'\t%Oe='55'\n"), lfmt, 255d);
@@ -95,27 +98,27 @@ static void test_valid_values() {
 #endif
 
   // Use supplied locale (ja_JP). This locale has a different alternate on some platforms.
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
-#  if defined(_WIN32)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
+#  if defined(WINLOCALE)
   check(loc, SV("%d=''\t%Od=''\t%e=''\t%Oe=''\n"), lfmt, 0d);
 #  else
   check(loc, SV("%d='00'\t%Od='00'\t%e=' 0'\t%Oe=' 0'\n"), lfmt, 0d);
 #  endif
   check(loc, SV("%d='01'\t%Od='01'\t%e=' 1'\t%Oe=' 1'\n"), lfmt, 1d);
   check(loc, SV("%d='31'\t%Od='31'\t%e='31'\t%Oe='31'\n"), lfmt, 31d);
-#  if defined(_WIN32)
+#  if defined(WINLOCALE)
   check(SV("%d=''\t%Od=''\t%e=''\t%Oe=''\n"), fmt, 255d);
 #  elif defined(_AIX)
   check(SV("%d='55'\t%Od='55'\t%e='55'\t%Oe='55'\n"), fmt, 255d);
 #  else
   check(SV("%d='255'\t%Od='255'\t%e='255'\t%Oe='255'\n"), fmt, 255d);
 #  endif
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc, SV("%d='00'\t%Od='〇'\t%e=' 0'\t%Oe='〇'\n"), lfmt, 0d);
   check(loc, SV("%d='01'\t%Od='一'\t%e=' 1'\t%Oe='一'\n"), lfmt, 1d);
   check(loc, SV("%d='31'\t%Od='三十一'\t%e='31'\t%Oe='三十一'\n"), lfmt, 31d);
   check(loc, SV("%d='255'\t%Od='255'\t%e='255'\t%Oe='255'\n"), lfmt, 255d);
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.duration.pass.cpp b/libcxx/test/std/time/time.syn/formatter.duration.pass.cpp
index 973bce8f81d4..4e111cbe5c57 100644
--- a/libcxx/test/std/time/time.syn/formatter.duration.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.duration.pass.cpp
@@ -15,6 +15,9 @@
 
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -245,7 +248,7 @@ static void test_valid_positive_integral_values() {
 #endif
            "%R='00:00'\t"
            "%T='00:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='00:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 AM'\t"
@@ -278,7 +281,7 @@ static void test_valid_positive_integral_values() {
 #endif
            "%R='11:59'\t"
            "%T='11:59:59'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='11:59:59'\t"
 #elif defined(_AIX)
            "%r='11:59:59 AM'\t"
@@ -311,7 +314,7 @@ static void test_valid_positive_integral_values() {
 #endif
            "%R='12:00'\t"
            "%T='12:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='12:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 PM'\t"
@@ -348,7 +351,7 @@ static void test_valid_positive_integral_values() {
            "%r='11:59:59 PM'\t"
 #elif defined(__APPLE__) || defined(__FreeBSD__)
            "%r=''\t"
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
            "%r='23:59:59'\t"
 #else
            "%r='11:59:59 '\t"
@@ -377,13 +380,13 @@ static void test_valid_positive_integral_values() {
 #endif
            "%R='00:00'\t"
            "%T='00:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='00:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 AM'\t"
 #elif defined(__APPLE__) || defined(__FreeBSD__)
            "%r=''\t"
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
            "%r='12:00:00'\t"
 #else
            "%r='12:00:00 '\t"
@@ -398,7 +401,7 @@ static void test_valid_positive_integral_values() {
         std::chrono::duration<int, std::ratio<86400>>(7));
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='00'\t"
@@ -423,7 +426,7 @@ static void test_valid_positive_integral_values() {
 #    endif
            "%X='00時00分00秒'\t"
            "%EX='00時00分00秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='0:00:00'\t"
            "%X='0:00:00'\t"
            "%EX='0:00:00'\t"
@@ -463,7 +466,7 @@ static void test_valid_positive_integral_values() {
 #    endif
            "%X='11時59分59秒'\t"
            "%EX='11時59分59秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='11:59:59'\t"
            "%X='11:59:59'\t"
            "%EX='11:59:59'\t"
@@ -504,7 +507,7 @@ static void test_valid_positive_integral_values() {
            "%X='12時00分00秒'\t"
            "%EX='12時00分00秒'\t"
 #  else
-#    ifdef _WIN32
+#    ifdef WINLOCALE
            "%r='12:00:00'\t"
 #    else
            "%r='午後12:00:00'\t"
@@ -544,7 +547,7 @@ static void test_valid_positive_integral_values() {
            "%X='23時59分59秒'\t"
            "%EX='23時59分59秒'\t"
 #  else
-#    ifdef _WIN32
+#    ifdef WINLOCALE
            "%r='23:59:59'\t"
 #    else
            "%r='午後11:59:59'\t"
@@ -583,7 +586,7 @@ static void test_valid_positive_integral_values() {
 #    endif
            "%X='00時00分00秒'\t"
            "%EX='00時00分00秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='0:00:00'\t"
            "%X='0:00:00'\t"
            "%EX='0:00:00'\t"
@@ -598,7 +601,7 @@ static void test_valid_positive_integral_values() {
            "\n"),
         lfmt,
         std::chrono::duration<int, std::ratio<86400>>(7));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)
   check(loc,
         SV("%H='00'\t"
            "%OH='〇'\t"
@@ -708,7 +711,7 @@ static void test_valid_positive_integral_values() {
            "\n"),
         lfmt,
         std::chrono::duration<int, std::ratio<86400>>(7));
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
@@ -810,7 +813,7 @@ static void test_valid_negative_integral_values() {
            "%r='11:59:59 PM'\t"
 #elif defined(__APPLE__) || defined(__FreeBSD__)
            "%r=''\t"
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
            "%r='23:59:59'\t"
 #else
            "%r='11:59:59 '\t"
@@ -825,7 +828,7 @@ static void test_valid_negative_integral_values() {
         -(23h + 59min + 59s));
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("-%H='23'\t"
            "%OH='23'\t"
@@ -850,7 +853,7 @@ static void test_valid_negative_integral_values() {
 #    endif
            "%X='23時59分59秒'\t"
            "%EX='23時59分59秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='23:59:59'\t"
            "%X='23:59:59'\t"
            "%EX='23:59:59'\t"
@@ -865,7 +868,7 @@ static void test_valid_negative_integral_values() {
            "\n"),
         lfmt,
         -(23h + 59min + 59s));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)|| defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)|| defined(__FreeBSD__)
   check(loc,
         SV("-%H='23'\t"
            "%OH='二十三'\t"
@@ -887,7 +890,7 @@ static void test_valid_negative_integral_values() {
            "\n"),
         lfmt,
         -(23h + 59min + 59s));
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)|| defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)|| defined(__FreeBSD__)
   std::locale::global(std::locale::classic());
 }
 
@@ -1040,7 +1043,7 @@ static void test_valid_fractional_values() {
   check(loc, SV("00.011"), SV("{:L%S}"), std::chrono::duration<double, std::milli>(11.123456789));
   check(loc, SV("01"), SV("{:L%S}"), std::chrono::duration<long double>(61.123456789));
 
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   check(SV("00.000000001"), SV("{:%OS}"), 1ns);
   check(SV("00.000000501"), SV("{:%OS}"), 501ns);
@@ -1057,7 +1060,7 @@ static void test_valid_fractional_values() {
   check(SV("00.001"), SV("{:%OS}"), std::chrono::duration<float, std::milli>(1.123456789));
   check(SV("00.011"), SV("{:%OS}"), std::chrono::duration<double, std::milli>(11.123456789));
   check(SV("01"), SV("{:%OS}"), std::chrono::duration<long double>(61.123456789));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)|| defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)|| defined(__FreeBSD__)
 
   check(loc, SV("〇.000000001"), SV("{:L%OS}"), 1ns);
   check(loc, SV("〇.000000501"), SV("{:L%OS}"), 501ns);
@@ -1074,7 +1077,7 @@ static void test_valid_fractional_values() {
   check(loc, SV("〇.001"), SV("{:L%OS}"), std::chrono::duration<float, std::milli>(1.123456789));
   check(loc, SV("〇.011"), SV("{:L%OS}"), std::chrono::duration<double, std::milli>(11.123456789));
   check(loc, SV("一"), SV("{:L%OS}"), std::chrono::duration<long double>(61.123456789));
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)|| defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)|| defined(__FreeBSD__)
 
   check(loc, SV("01:05:06.000000001"), SV("{:L%T}"), 1h + 5min + 6s + 1ns);
   check(loc, SV("01:05:06.000000501"), SV("{:L%T}"), 1h + 5min + 6s + 501ns);
diff --git a/libcxx/test/std/time/time.syn/formatter.file_time.pass.cpp b/libcxx/test/std/time/time.syn/formatter.file_time.pass.cpp
index 28a972b19dce..abdf9a9725a4 100644
--- a/libcxx/test/std/time/time.syn/formatter.file_time.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.file_time.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -111,7 +114,7 @@ static void test_valid_values_year() {
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   check(loc,
         SV("%C='19'\t%EC='19'\t%y='70'\t%Oy='70'\t%Ey='70'\t%Y='1970'\t%EY='1970'\n"),
@@ -122,7 +125,7 @@ static void test_valid_values_year() {
         SV("%C='20'\t%EC='20'\t%y='09'\t%Oy='09'\t%Ey='09'\t%Y='2009'\t%EY='2009'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else                                  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX)|| defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX)|| defined(__FreeBSD__)
 
   check(loc,
         SV("%C='19'\t%EC='昭和'\t%y='70'\t%Oy='七十'\t%Ey='45'\t%Y='1970'\t%EY='昭和45年'\n"),
@@ -133,7 +136,7 @@ static void test_valid_values_year() {
         SV("%C='20'\t%EC='平成'\t%y='09'\t%Oy='九'\t%Ey='21'\t%Y='2009'\t%EY='平成21年'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif                                 // defined(_WIN32) || defined(__APPLE__) || defined(_AIX)|| defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX)|| defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -173,7 +176,7 @@ static void test_valid_values_month() {
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(loc,
         SV("%b='1'\t%h='1'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -183,7 +186,7 @@ static void test_valid_values_month() {
         SV("%b='5'\t%h='5'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(_AIX)                    // _WIN32
+#elif defined(_AIX)                    // WINLOCALE
   check(loc,
         SV("%b='1月'\t%h='1月'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -193,7 +196,7 @@ static void test_valid_values_month() {
         SV("%b='5月'\t%h='5月'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(__APPLE__)               // _WIN32
+#elif defined(__APPLE__)               // WINLOCALE
   check(loc,
         SV("%b=' 1'\t%h=' 1'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -203,7 +206,7 @@ static void test_valid_values_month() {
         SV("%b=' 5'\t%h=' 5'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(__FreeBSD__)             // _WIN32
+#elif defined(__FreeBSD__)             // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%h=' 1月'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -213,7 +216,7 @@ static void test_valid_values_month() {
         SV("%b=' 5月'\t%h=' 5月'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#else                                  // _WIN32
+#else                                  // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%h=' 1月'\t%B='1月'\t%m='01'\t%Om='一'\n"),
         lfmt,
@@ -223,7 +226,7 @@ static void test_valid_values_month() {
         SV("%b=' 5月'\t%h=' 5月'\t%B='5月'\t%m='05'\t%Om='五'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#endif                                 // _WIN32
+#endif                                 // WINLOCALE
 
   std::locale::global(std::locale::classic());
 }
@@ -255,7 +258,7 @@ static void test_valid_values_day() {
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%d='01'\t%Od='01'\t%e=' 1'\t%Oe=' 1'\n"),
         lfmt,
@@ -265,7 +268,7 @@ static void test_valid_values_day() {
         SV("%d='13'\t%Od='13'\t%e='13'\t%Oe='13'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else                                  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%d='01'\t%Od='一'\t%e=' 1'\t%Oe='一'\n"),
         lfmt,
@@ -276,7 +279,7 @@ static void test_valid_values_day() {
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -323,7 +326,7 @@ static void test_valid_values_weekday() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%a='木'\t%A='木曜日'\t%u='4'\t%Ou='4'\t%w='4'\t%Ow='4'\n"),
         lfmt,
@@ -333,7 +336,7 @@ static void test_valid_values_weekday() {
         SV("%a='日'\t%A='日曜日'\t%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\n"),
         lfmt,
         file_seconds(4'294'967'295s)); // 06:28:15 UTC on Sunday, 7 February 2106
-#else                                  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%a='木'\t%A='木曜日'\t%u='4'\t%Ou='四'\t%w='4'\t%Ow='四'\n"),
         lfmt,
@@ -343,7 +346,7 @@ static void test_valid_values_weekday() {
         SV("%a='日'\t%A='日曜日'\t%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\n"),
         lfmt,
         file_seconds(4'294'967'295s)); // 06:28:15 UTC on Sunday, 7 February 2106
-#endif                                 // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -401,7 +404,7 @@ static void test_valid_values_week() {
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%U='00'\t%OU='00'\t%W='00'\t%OW='00'\n"),
         lfmt,
@@ -411,7 +414,7 @@ static void test_valid_values_week() {
         SV("%U='20'\t%OU='20'\t%W='20'\t%OW='20'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#else                                  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%U='00'\t%OU='〇'\t%W='00'\t%OW='〇'\n"),
         lfmt,
@@ -421,7 +424,7 @@ static void test_valid_values_week() {
         SV("%U='20'\t%OU='二十'\t%W='20'\t%OW='二十'\n"),
         lfmt,
         file_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#endif                                 // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   std::locale::global(std::locale::classic());
 }
 
@@ -452,7 +455,7 @@ static void test_valid_values_iso_8601_week() {
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%g='70'\t%G='1970'\t%V='01'\t%OV='01'\n"),
         lfmt,
@@ -462,7 +465,7 @@ static void test_valid_values_iso_8601_week() {
         SV("%g='09'\t%G='2009'\t%V='07'\t%OV='07'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else                                  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%g='70'\t%G='1970'\t%V='01'\t%OV='一'\n"),
         lfmt,
@@ -472,7 +475,7 @@ static void test_valid_values_iso_8601_week() {
         SV("%g='09'\t%G='2009'\t%V='07'\t%OV='七'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif                                 // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -516,7 +519,7 @@ static void test_valid_values_date() {
 #endif
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%D='01/01/70'\t%F='1970-01-01'\t%x='1970/01/01'\t%Ex='1970/01/01'\n"),
         lfmt,
@@ -526,7 +529,7 @@ static void test_valid_values_date() {
         SV("%D='02/13/09'\t%F='2009-02-13'\t%x='2009/02/13'\t%Ex='2009/02/13'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else                                  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%D='01/01/70'\t%F='1970-01-01'\t%x='1970年01月01日'\t%Ex='昭和45年01月01日'\n"),
         lfmt,
@@ -536,7 +539,7 @@ static void test_valid_values_date() {
         SV("%D='02/13/09'\t%F='2009-02-13'\t%x='2009年02月13日'\t%Ex='平成21年02月13日'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif                                 // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -636,7 +639,7 @@ static void test_valid_values_time() {
 #endif
            "%R='00:00'\t"
            "%T='00:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='00:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 AM'\t"
@@ -666,13 +669,13 @@ static void test_valid_values_time() {
 #endif
            "%R='23:31'\t"
            "%T='23:31:30,123'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='23:31:30'\t"
 #elif defined(_AIX)
            "%r='11:31:30 PM'\t"
 #elif defined(__APPLE__) || defined(__FreeBSD__)
            "%r=''\t"
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
            "%r='23:31:30 '\t"
 #else
            "%r='11:31:30 '\t"
@@ -685,7 +688,7 @@ static void test_valid_values_time() {
             1'234'567'890'123ms)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.a
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='00'\t"
@@ -710,7 +713,7 @@ static void test_valid_values_time() {
 #    endif
            "%X='00時00分00秒'\t"
            "%EX='00時00分00秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='0:00:00'\t"
            "%X='0:00:00'\t"
            "%EX='0:00:00'\t"
@@ -747,7 +750,7 @@ static void test_valid_values_time() {
 #    endif
            "%X='23時31分30秒'\t"
            "%EX='23時31分30秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='23:31:30'\t"
            "%X='23:31:30'\t"
            "%EX='23:31:30'\t"
@@ -759,7 +762,7 @@ static void test_valid_values_time() {
            "\n"),
         lfmt,
         std::chrono::hh_mm_ss(23h + 31min + 30s + 123ms));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='〇'\t"
@@ -798,7 +801,7 @@ static void test_valid_values_time() {
         lfmt,
         std::chrono::sys_time<std::chrono::milliseconds>(
             1'234'567'890'123ms)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -833,7 +836,7 @@ static void test_valid_values_date_time() {
       SV("%c=' 1 janvier 1970 à 00:00:00 UTC'\t%Ec=' 1 janvier 1970 à 00:00:00 UTC'\n"),
 #elif defined(__APPLE__)
       SV("%c='Jeu  1 jan 00:00:00 1970'\t%Ec='Jeu  1 jan 00:00:00 1970'\n"),
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
       SV("%c='01/01/1970 00:00:00'\t%Ec='01/01/1970 00:00:00'\n"),
 #elif defined(__FreeBSD__)
       SV("%c='jeu.  1 janv. 00:00:00 1970'\t%Ec='jeu.  1 janv. 00:00:00 1970'\n"),
@@ -853,7 +856,7 @@ static void test_valid_values_date_time() {
       SV("%c='13 février 2009 à 23:31:30 UTC'\t%Ec='13 février 2009 à 23:31:30 UTC'\n"),
 #elif defined(__APPLE__)
       SV("%c='Ven 13 fév 23:31:30 2009'\t%Ec='Ven 13 fév 23:31:30 2009'\n"),
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
       SV("%c='13/02/2009 23:31:30'\t%Ec='13/02/2009 23:31:30'\n"),
 #elif defined(__FreeBSD__)
       SV("%c='ven. 13 févr. 23:31:30 2009'\t%Ec='ven. 13 févr. 23:31:30 2009'\n"),
@@ -882,7 +885,7 @@ static void test_valid_values_date_time() {
         SV("%c='2009年02月13日 23:31:30 UTC'\t%Ec='2009年02月13日 23:31:30 UTC'\n"),
         lfmt,
         file_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#elif defined(_WIN32)                  // defined(__APPLE__)|| defined(__FreeBSD__)
+#elif defined(WINLOCALE)               // defined(__APPLE__)|| defined(__FreeBSD__)
   check(loc,
         SV("%c='1970/01/01 0:00:00'\t%Ec='1970/01/01 0:00:00'\n"),
         lfmt,
diff --git a/libcxx/test/std/time/time.syn/formatter.hh_mm_ss.pass.cpp b/libcxx/test/std/time/time.syn/formatter.hh_mm_ss.pass.cpp
index 82d9b4c7540a..24157988bc21 100644
--- a/libcxx/test/std/time/time.syn/formatter.hh_mm_ss.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.hh_mm_ss.pass.cpp
@@ -15,6 +15,9 @@
 
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -186,7 +189,7 @@ static void test_valid_values() {
 #endif
            "%R='00:00'\t"
            "%T='00:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='00:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 AM'\t"
@@ -216,7 +219,7 @@ static void test_valid_values() {
 #endif
            "%R='23:31'\t"
            "%T='23:31:30,123'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='23:31:30'\t"
 #elif defined(_AIX)
            "%r='11:31:30 PM'\t"
@@ -246,7 +249,7 @@ static void test_valid_values() {
 #endif
            "%R='03:02'\t"
            "%T='03:02:01,123456789012'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='03:02:01'\t"
 #elif defined(_AIX)
            "%r='03:02:01 AM'\t"
@@ -276,7 +279,7 @@ static void test_valid_values() {
 #endif
            "%R='01:01'\t"
            "%T='01:01:01'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='01:01:01'\t"
 #elif defined(_AIX)
            "%r='01:01:01 AM'\t"
@@ -292,7 +295,7 @@ static void test_valid_values() {
         std::chrono::hh_mm_ss(std::chrono::duration<double>(3661.123456)));
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='00'\t"
@@ -317,7 +320,7 @@ static void test_valid_values() {
 #    endif
            "%X='00時00分00秒'\t"
            "%EX='00時00分00秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='0:00:00'\t"
            "%X='0:00:00'\t"
            "%EX='0:00:00'\t"
@@ -354,7 +357,7 @@ static void test_valid_values() {
 #    endif
            "%X='23時31分30秒'\t"
            "%EX='23時31分30秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='23:31:30'\t"
            "%X='23:31:30'\t"
            "%EX='23:31:30'\t"
@@ -391,7 +394,7 @@ static void test_valid_values() {
 #    endif
            "%X='03時02分01秒'\t"
            "%EX='03時02分01秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='3:02:01'\t"
            "%X='3:02:01'\t"
            "%EX='3:02:01'\t"
@@ -428,7 +431,7 @@ static void test_valid_values() {
 #    endif
            "%X='01時01分01秒'\t"
            "%EX='01時01分01秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='1:01:01'\t"
            "%X='1:01:01'\t"
            "%EX='1:01:01'\t"
@@ -440,7 +443,7 @@ static void test_valid_values() {
            "\n"),
         lfmt,
         std::chrono::hh_mm_ss(std::chrono::duration<double>(3661.123456)));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)
   check(loc,
         SV("%H='00'\t"
            "%OH='〇'\t"
@@ -517,7 +520,7 @@ static void test_valid_values() {
            "\n"),
         lfmt,
         std::chrono::hh_mm_ss(std::chrono::duration<double>(3661.123456)));
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.local_time.pass.cpp b/libcxx/test/std/time/time.syn/formatter.local_time.pass.cpp
index bd23337ccb31..d68e8ac57993 100644
--- a/libcxx/test/std/time/time.syn/formatter.local_time.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.local_time.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -105,7 +108,7 @@ static void test_valid_values_year() {
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%C='19'\t%EC='19'\t%y='70'\t%Oy='70'\t%Ey='70'\t%Y='1970'\t%EY='1970'\n"),
         lfmt,
@@ -115,7 +118,7 @@ static void test_valid_values_year() {
         SV("%C='20'\t%EC='20'\t%y='09'\t%Oy='09'\t%Ey='09'\t%Y='2009'\t%EY='2009'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
   check(loc,
         SV("%C='19'\t%EC='昭和'\t%y='70'\t%Oy='七十'\t%Ey='45'\t%Y='1970'\t%EY='昭和45年'\n"),
         lfmt,
@@ -125,7 +128,7 @@ static void test_valid_values_year() {
         SV("%C='20'\t%EC='平成'\t%y='09'\t%Oy='九'\t%Ey='21'\t%Y='2009'\t%EY='平成21年'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -165,7 +168,7 @@ static void test_valid_values_month() {
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(loc,
         SV("%b='1'\t%h='1'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -175,7 +178,7 @@ static void test_valid_values_month() {
         SV("%b='5'\t%h='5'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(_AIX)                                  // _WIN32
+#elif defined(_AIX)                                  // WINLOCALE
   check(loc,
         SV("%b='1月'\t%h='1月'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -185,7 +188,7 @@ static void test_valid_values_month() {
         SV("%b='5月'\t%h='5月'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(__APPLE__)                             // _WIN32
+#elif defined(__APPLE__)                             // WINLOCALE
   check(loc,
         SV("%b=' 1'\t%h=' 1'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -195,7 +198,7 @@ static void test_valid_values_month() {
         SV("%b=' 5'\t%h=' 5'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(__FreeBSD__)                           // _WIN32
+#elif defined(__FreeBSD__)                           // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%h=' 1月'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -205,7 +208,7 @@ static void test_valid_values_month() {
         SV("%b=' 5月'\t%h=' 5月'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#else                                                // _WIN32
+#else                                                // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%h=' 1月'\t%B='1月'\t%m='01'\t%Om='一'\n"),
         lfmt,
@@ -215,7 +218,7 @@ static void test_valid_values_month() {
         SV("%b=' 5月'\t%h=' 5月'\t%B='5月'\t%m='05'\t%Om='五'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#endif                                               // _WIN32
+#endif                                               // WINLOCALE
 
   std::locale::global(std::locale::classic());
 }
@@ -249,7 +252,7 @@ static void test_valid_values_day() {
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%d='01'\t%Od='01'\t%e=' 1'\t%Oe=' 1'\n"),
         lfmt,
@@ -259,7 +262,7 @@ static void test_valid_values_day() {
         SV("%d='13'\t%Od='13'\t%e='13'\t%Oe='13'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%d='01'\t%Od='一'\t%e=' 1'\t%Oe='一'\n"),
         lfmt,
@@ -270,7 +273,7 @@ static void test_valid_values_day() {
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -317,7 +320,7 @@ static void test_valid_values_weekday() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%a='木'\t%A='木曜日'\t%u='4'\t%Ou='4'\t%w='4'\t%Ow='4'\n"),
         lfmt,
@@ -327,7 +330,7 @@ static void test_valid_values_weekday() {
         SV("%a='日'\t%A='日曜日'\t%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\n"),
         lfmt,
         std::chrono::local_seconds(4'294'967'295s)); // 06:28:15 UTC on Sunday, 7 February 2106
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%a='木'\t%A='木曜日'\t%u='4'\t%Ou='四'\t%w='4'\t%Ow='四'\n"),
         lfmt,
@@ -337,7 +340,7 @@ static void test_valid_values_weekday() {
         SV("%a='日'\t%A='日曜日'\t%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\n"),
         lfmt,
         std::chrono::local_seconds(4'294'967'295s)); // 06:28:15 UTC on Sunday, 7 February 2106
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -400,7 +403,7 @@ static void test_valid_values_week() {
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%U='00'\t%OU='00'\t%W='00'\t%OW='00'\n"),
         lfmt,
@@ -410,7 +413,7 @@ static void test_valid_values_week() {
         SV("%U='20'\t%OU='20'\t%W='20'\t%OW='20'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%U='00'\t%OU='〇'\t%W='00'\t%OW='〇'\n"),
         lfmt,
@@ -420,7 +423,7 @@ static void test_valid_values_week() {
         SV("%U='20'\t%OU='二十'\t%W='20'\t%OW='二十'\n"),
         lfmt,
         std::chrono::local_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   std::locale::global(std::locale::classic());
 }
 
@@ -453,7 +456,7 @@ static void test_valid_values_iso_8601_week() {
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%g='70'\t%G='1970'\t%V='01'\t%OV='01'\n"),
         lfmt,
@@ -463,7 +466,7 @@ static void test_valid_values_iso_8601_week() {
         SV("%g='09'\t%G='2009'\t%V='07'\t%OV='07'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%g='70'\t%G='1970'\t%V='01'\t%OV='一'\n"),
         lfmt,
@@ -473,7 +476,7 @@ static void test_valid_values_iso_8601_week() {
         SV("%g='09'\t%G='2009'\t%V='07'\t%OV='七'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -517,7 +520,7 @@ static void test_valid_values_date() {
 #endif
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%D='01/01/70'\t%F='1970-01-01'\t%x='1970/01/01'\t%Ex='1970/01/01'\n"),
         lfmt,
@@ -527,7 +530,7 @@ static void test_valid_values_date() {
         SV("%D='02/13/09'\t%F='2009-02-13'\t%x='2009/02/13'\t%Ex='2009/02/13'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%D='01/01/70'\t%F='1970-01-01'\t%x='1970年01月01日'\t%Ex='昭和45年01月01日'\n"),
         lfmt,
@@ -537,7 +540,7 @@ static void test_valid_values_date() {
         SV("%D='02/13/09'\t%F='2009-02-13'\t%x='2009年02月13日'\t%Ex='平成21年02月13日'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -637,7 +640,7 @@ static void test_valid_values_time() {
 #endif
            "%R='00:00'\t"
            "%T='00:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='00:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 AM'\t"
@@ -667,7 +670,7 @@ static void test_valid_values_time() {
 #endif
            "%R='23:31'\t"
            "%T='23:31:30,123'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='23:31:30'\t"
 #elif defined(_AIX)
            "%r='11:31:30 PM'\t"
@@ -684,7 +687,7 @@ static void test_valid_values_time() {
             1'234'567'890'123ms)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.a
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='00'\t"
@@ -709,7 +712,7 @@ static void test_valid_values_time() {
 #    endif
            "%X='00時00分00秒'\t"
            "%EX='00時00分00秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='0:00:00'\t"
            "%X='0:00:00'\t"
            "%EX='0:00:00'\t"
@@ -746,7 +749,7 @@ static void test_valid_values_time() {
 #    endif
            "%X='23時31分30秒'\t"
            "%EX='23時31分30秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='23:31:30'\t"
            "%X='23:31:30'\t"
            "%EX='23:31:30'\t"
@@ -758,7 +761,7 @@ static void test_valid_values_time() {
            "\n"),
         lfmt,
         std::chrono::hh_mm_ss(23h + 31min + 30s + 123ms));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='〇'\t"
@@ -797,7 +800,7 @@ static void test_valid_values_time() {
         lfmt,
         std::chrono::local_time<std::chrono::milliseconds>(
             1'234'567'890'123ms)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -832,7 +835,7 @@ static void test_valid_values_date_time() {
       SV("%c=' 1 janvier 1970 à 00:00:00 UTC'\t%Ec=' 1 janvier 1970 à 00:00:00 UTC'\n"),
 #elif defined(__APPLE__)
       SV("%c='Jeu  1 jan 00:00:00 1970'\t%Ec='Jeu  1 jan 00:00:00 1970'\n"),
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
       SV("%c='01/01/1970 00:00:00'\t%Ec='01/01/1970 00:00:00'\n"),
 #elif defined(__FreeBSD__)
       SV("%c='jeu.  1 janv. 00:00:00 1970'\t%Ec='jeu.  1 janv. 00:00:00 1970'\n"),
@@ -852,7 +855,7 @@ static void test_valid_values_date_time() {
       SV("%c='13 février 2009 à 23:31:30 UTC'\t%Ec='13 février 2009 à 23:31:30 UTC'\n"),
 #elif defined(__APPLE__)
       SV("%c='Ven 13 fév 23:31:30 2009'\t%Ec='Ven 13 fév 23:31:30 2009'\n"),
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
       SV("%c='13/02/2009 23:31:30'\t%Ec='13/02/2009 23:31:30'\n"),
 #elif defined(__FreeBSD__)
       SV("%c='ven. 13 févr. 23:31:30 2009'\t%Ec='ven. 13 févr. 23:31:30 2009'\n"),
@@ -881,7 +884,7 @@ static void test_valid_values_date_time() {
         SV("%c='2009年02月13日 23:31:30 UTC'\t%Ec='2009年02月13日 23:31:30 UTC'\n"),
         lfmt,
         std::chrono::local_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#elif defined(_WIN32)                                // defined(__APPLE__)|| defined(__FreeBSD__)
+#elif defined(WINLOCALE)                             // defined(__APPLE__)|| defined(__FreeBSD__)
   check(loc,
         SV("%c='1970/01/01 0:00:00'\t%Ec='1970/01/01 0:00:00'\n"),
         lfmt,
diff --git a/libcxx/test/std/time/time.syn/formatter.month.pass.cpp b/libcxx/test/std/time/time.syn/formatter.month.pass.cpp
index 09c0fadbe0ea..b218f11fd9b6 100644
--- a/libcxx/test/std/time/time.syn/formatter.month.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.month.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -100,7 +103,7 @@ static void test_valid_values() {
   check(SV("%b='janv.'\t%B='janvier'\t%h='janv.'\t%m='01'\t%Om='01'\n"), lfmt, std::chrono::January);
   check(SV("%b='févr.'\t%B='février'\t%h='févr.'\t%m='02'\t%Om='02'\n"), lfmt, std::chrono::February);
   check(SV("%b='mars'\t%B='mars'\t%h='mars'\t%m='03'\t%Om='03'\n"), lfmt, std::chrono::March);
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
   check(SV("%b='avr.'\t%B='avril'\t%h='avr.'\t%m='04'\t%Om='04'\n"), lfmt, std::chrono::April);
 #  else
   check(SV("%b='avril'\t%B='avril'\t%h='avril'\t%m='04'\t%Om='04'\n"), lfmt, std::chrono::April);
@@ -116,7 +119,7 @@ static void test_valid_values() {
 #endif // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(loc, SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\n"), lfmt, std::chrono::January);
   check(loc, SV("%b='2'\t%B='2月'\t%h='2'\t%m='02'\t%Om='02'\n"), lfmt, std::chrono::February);
   check(loc, SV("%b='3'\t%B='3月'\t%h='3'\t%m='03'\t%Om='03'\n"), lfmt, std::chrono::March);
@@ -129,7 +132,7 @@ static void test_valid_values() {
   check(loc, SV("%b='10'\t%B='10月'\t%h='10'\t%m='10'\t%Om='10'\n"), lfmt, std::chrono::October);
   check(loc, SV("%b='11'\t%B='11月'\t%h='11'\t%m='11'\t%Om='11'\n"), lfmt, std::chrono::November);
   check(loc, SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\n"), lfmt, std::chrono::December);
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)        // defined(WINLOCALE)
   check(loc, SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\n"), lfmt, std::chrono::January);
   check(loc, SV("%b='2月'\t%B='2月'\t%h='2月'\t%m='02'\t%Om='02'\n"), lfmt, std::chrono::February);
   check(loc, SV("%b='3月'\t%B='3月'\t%h='3月'\t%m='03'\t%Om='03'\n"), lfmt, std::chrono::March);
@@ -142,7 +145,7 @@ static void test_valid_values() {
   check(loc, SV("%b='10月'\t%B='10月'\t%h='10月'\t%m='10'\t%Om='10'\n"), lfmt, std::chrono::October);
   check(loc, SV("%b='11月'\t%B='11月'\t%h='11月'\t%m='11'\t%Om='11'\n"), lfmt, std::chrono::November);
   check(loc, SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\n"), lfmt, std::chrono::December);
-#elif defined(__FreeBSD__) // defined(_WIN32)
+#elif defined(__FreeBSD__) // defined(WINLOCALE)
   check(loc, SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\n"), lfmt, std::chrono::January);
   check(loc, SV("%b=' 2月'\t%B='2月'\t%h=' 2月'\t%m='02'\t%Om='02'\n"), lfmt, std::chrono::February);
   check(loc, SV("%b=' 3月'\t%B='3月'\t%h=' 3月'\t%m='03'\t%Om='03'\n"), lfmt, std::chrono::March);
@@ -155,7 +158,7 @@ static void test_valid_values() {
   check(loc, SV("%b='10月'\t%B='10月'\t%h='10月'\t%m='10'\t%Om='10'\n"), lfmt, std::chrono::October);
   check(loc, SV("%b='11月'\t%B='11月'\t%h='11月'\t%m='11'\t%Om='11'\n"), lfmt, std::chrono::November);
   check(loc, SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\n"), lfmt, std::chrono::December);
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__)   // defined(WINLOCALE)
   check(loc, SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\n"), lfmt, std::chrono::January);
   check(loc, SV("%b=' 2'\t%B='2月'\t%h=' 2'\t%m='02'\t%Om='02'\n"), lfmt, std::chrono::February);
   check(loc, SV("%b=' 3'\t%B='3月'\t%h=' 3'\t%m='03'\t%Om='03'\n"), lfmt, std::chrono::March);
@@ -168,7 +171,7 @@ static void test_valid_values() {
   check(loc, SV("%b='10'\t%B='10月'\t%h='10'\t%m='10'\t%Om='10'\n"), lfmt, std::chrono::October);
   check(loc, SV("%b='11'\t%B='11月'\t%h='11'\t%m='11'\t%Om='11'\n"), lfmt, std::chrono::November);
   check(loc, SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\n"), lfmt, std::chrono::December);
-#else                    // defined(_WIN32)
+#else                      // defined(WINLOCALE)
   check(loc, SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\n"), lfmt, std::chrono::January);
   check(loc, SV("%b=' 2月'\t%B='2月'\t%h=' 2月'\t%m='02'\t%Om='二'\n"), lfmt, std::chrono::February);
   check(loc, SV("%b=' 3月'\t%B='3月'\t%h=' 3月'\t%m='03'\t%Om='三'\n"), lfmt, std::chrono::March);
@@ -181,7 +184,7 @@ static void test_valid_values() {
   check(loc, SV("%b='10月'\t%B='10月'\t%h='10月'\t%m='10'\t%Om='十'\n"), lfmt, std::chrono::October);
   check(loc, SV("%b='11月'\t%B='11月'\t%h='11月'\t%m='11'\t%Om='十一'\n"), lfmt, std::chrono::November);
   check(loc, SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='十二'\n"), lfmt, std::chrono::December);
-#endif                   //  defined(_WIN32)
+#endif                     //  defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.month_day.pass.cpp b/libcxx/test/std/time/time.syn/formatter.month_day.pass.cpp
index 63ead5c152d5..2a4788a8ceea 100644
--- a/libcxx/test/std/time/time.syn/formatter.month_day.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.month_day.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT Investigate Windows issues.
 // XFAIL: msvc
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -111,7 +114,7 @@ static void test_valid_values() {
   std::locale::global(std::locale(LOCALE_fr_FR_UTF_8));
 
   // Non localized output using C-locale
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(SV("%b='Jan'\t%B='January'\t%h='Jan'\t%m='01'\t%Om='01'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         fmt,
         std::chrono::month_day{std::chrono::January, std::chrono::day{0}});
@@ -141,7 +144,7 @@ static void test_valid_values() {
   check(SV("%b='Aug'\t%B='August'\t%h='Aug'\t%m='08'\t%Om='08'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         fmt,
         std::chrono::month_day{std::chrono::August, std::chrono::day{31}});
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(SV("%b='Sep'\t%B='September'\t%h='Sep'\t%m='09'\t%Om='09'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         fmt,
         std::chrono::month_day{std::chrono::September, std::chrono::day{32}});
@@ -154,7 +157,7 @@ static void test_valid_values() {
   check(SV("%b='Dec'\t%B='December'\t%h='Dec'\t%m='12'\t%Om='12'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         fmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#else // _WIN32
+#else // WINLOCALE
   check(SV("%b='Sep'\t%B='September'\t%h='Sep'\t%m='09'\t%Om='09'\t%d='32'\t%e='32'\t%Od='32'\t%Oe='32'\n"),
         fmt,
         std::chrono::month_day{std::chrono::September, std::chrono::day{32}});
@@ -176,7 +179,7 @@ static void test_valid_values() {
         fmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
 #  endif //  defined(_AIX)
-#endif   // _WIN32
+#endif   // WINLOCALE
 
   // Use the global locale (fr_FR)
 #if defined(__APPLE__)
@@ -217,7 +220,7 @@ static void test_valid_values() {
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
 #else // defined(__APPLE__)
-#  if defined(_WIN32)
+#  if defined(WINLOCALE)
   check(SV("%b='janv.'\t%B='janvier'\t%h='janv.'\t%m='01'\t%Om='01'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::month_day{std::chrono::January, std::chrono::day{0}});
@@ -233,11 +236,11 @@ static void test_valid_values() {
         lfmt,
         std::chrono::month_day{std::chrono::March, std::chrono::day{9}});
   check(
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avr.'\t%B='avril'\t%h='avr.'\t%m='04'\t%Om='04'\t%d='10'\t%e='10'\t%Od='10'\t%Oe='10'\n"),
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avril'\t%B='avril'\t%h='avril'\t%m='04'\t%Om='04'\t%d='10'\t%e='10'\t%Od='10'\t%Oe='10'\n"),
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       lfmt,
       std::chrono::month_day{std::chrono::April, std::chrono::day{10}});
   check(SV("%b='mai'\t%B='mai'\t%h='mai'\t%m='05'\t%Om='05'\t%d='28'\t%e='28'\t%Od='28'\t%Oe='28'\n"),
@@ -252,7 +255,7 @@ static void test_valid_values() {
   check(SV("%b='août'\t%B='août'\t%h='août'\t%m='08'\t%Om='08'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
         std::chrono::month_day{std::chrono::August, std::chrono::day{31}});
-#  if defined(_WIN32)
+#  if defined(WINLOCALE)
   check(SV("%b='sept.'\t%B='septembre'\t%h='sept.'\t%m='09'\t%Om='09'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::month_day{std::chrono::September, std::chrono::day{32}});
@@ -265,7 +268,7 @@ static void test_valid_values() {
   check(SV("%b='déc.'\t%B='décembre'\t%h='déc.'\t%m='12'\t%Om='12'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#  else // defined(_WIN32)
+#  else // defined(WINLOCALE)
   check(SV("%b='sept.'\t%B='septembre'\t%h='sept.'\t%m='09'\t%Om='09'\t%d='32'\t%e='32'\t%Od='32'\t%Oe='32'\n"),
         lfmt,
         std::chrono::month_day{std::chrono::September, std::chrono::day{32}});
@@ -287,11 +290,11 @@ static void test_valid_values() {
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
 #    endif //   defined(_AIX)
-#  endif   //   defined(_WIN32)
+#  endif   //   defined(WINLOCALE)
 #endif     // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(loc,
         SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
@@ -340,7 +343,7 @@ static void test_valid_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)        // defined(WINLOCALE)
   check(loc,
         SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\t%d='00'\t%e=' 0'\t%Od='00'\t%Oe=' 0'\n"),
         lfmt,
@@ -389,7 +392,7 @@ static void test_valid_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\t%d='55'\t%e='55'\t%Od='55'\t%Oe='55'\n"),
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#elif defined(__FreeBSD__) // defined(_WIN32)
+#elif defined(__FreeBSD__) // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\t%d='00'\t%e=' 0'\t%Od='00'\t%Oe=' 0'\n"),
         lfmt,
@@ -438,7 +441,7 @@ static void test_valid_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\t%d='255'\t%e='255'\t%Od='255'\t%Oe='255'\n"),
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__)   // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\t%d='00'\t%e=' 0'\t%Od='00'\t%Oe=' 0'\n"),
         lfmt,
@@ -487,7 +490,7 @@ static void test_valid_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\t%d='255'\t%e='255'\t%Od='255'\t%Oe='255'\n"),
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#else                    // defined(_WIN32)
+#else                      // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\t%d='00'\t%e=' 0'\t%Od='〇'\t%Oe='〇'\n"),
         lfmt,
@@ -536,7 +539,7 @@ static void test_valid_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='十二'\t%d='255'\t%e='255'\t%Od='255'\t%Oe='255'\n"),
         lfmt,
         std::chrono::month_day{std::chrono::December, std::chrono::day{255}});
-#endif                   //  defined(_WIN32)
+#endif                     //  defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.month_day_last.pass.cpp b/libcxx/test/std/time/time.syn/formatter.month_day_last.pass.cpp
index 6f9bfd834ff6..23a766f5150b 100644
--- a/libcxx/test/std/time/time.syn/formatter.month_day_last.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.month_day_last.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -158,11 +161,11 @@ static void test_valid_values() {
         lfmt,
         std::chrono::month_day_last{std::chrono::March});
   check(
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avr.'\t%B='avril'\t%h='avr.'\t%m='04'\t%Om='04'\n"),
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avril'\t%B='avril'\t%h='avril'\t%m='04'\t%Om='04'\n"),
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       lfmt,
       std::chrono::month_day_last{std::chrono::April});
   check(SV("%b='mai'\t%B='mai'\t%h='mai'\t%m='05'\t%Om='05'\n"), lfmt, std::chrono::month_day_last{std::chrono::May});
@@ -189,7 +192,7 @@ static void test_valid_values() {
 #endif   // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(loc,
         SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -223,7 +226,7 @@ static void test_valid_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_day_last{std::chrono::December});
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__)   // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -266,7 +269,7 @@ static void test_valid_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_day_last{std::chrono::December});
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)        // defined(WINLOCALE)
   check(loc,
         SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -315,7 +318,7 @@ static void test_valid_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_day_last{std::chrono::December});
-#elif defined(__FreeBSD__) // defined(_WIN32)
+#elif defined(__FreeBSD__) // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -364,7 +367,7 @@ static void test_valid_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_day_last{std::chrono::December});
-#else                    // defined(_WIN32)
+#else                      // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\n"),
         lfmt,
@@ -413,7 +416,7 @@ static void test_valid_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='十二'\n"),
         lfmt,
         std::chrono::month_day_last{std::chrono::December});
-#endif                   // defined(_WIN32)
+#endif                     // defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.month_weekday.pass.cpp b/libcxx/test/std/time/time.syn/formatter.month_weekday.pass.cpp
index 3d3430f653ff..5fb9872a01b5 100644
--- a/libcxx/test/std/time/time.syn/formatter.month_weekday.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.month_weekday.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -271,11 +274,11 @@ static void test_valid_month() {
         lfmt,
         std::chrono::month_weekday{std::chrono::March, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
   check(
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avr.'\t%B='avril'\t%h='avr.'\t%m='04'\t%Om='04'\n"),
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avril'\t%B='avril'\t%h='avril'\t%m='04'\t%Om='04'\n"),
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       lfmt,
       std::chrono::month_weekday{std::chrono::April, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
   check(SV("%b='mai'\t%B='mai'\t%h='mai'\t%m='05'\t%Om='05'\n"),
@@ -305,7 +308,7 @@ static void test_valid_month() {
 #endif   // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(loc,
         SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -354,7 +357,7 @@ static void test_valid_month() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__)   // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -403,7 +406,7 @@ static void test_valid_month() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
-#elif defined(_AIX)      // _WIN32
+#elif defined(_AIX)        // WINLOCALE
   check(loc,
         SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -452,7 +455,7 @@ static void test_valid_month() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
-#elif defined(__FreeBSD__) // _WIN32
+#elif defined(__FreeBSD__) // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -501,7 +504,7 @@ static void test_valid_month() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
-#else                    // _WIN32
+#else                      // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\n"),
         lfmt,
@@ -550,7 +553,7 @@ static void test_valid_month() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='十二'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{0}, 1}});
-#endif                   // _WIN32
+#endif                     // WINLOCALE
 
   std::locale::global(std::locale::classic());
 }
@@ -646,7 +649,7 @@ static void test_valid_weekday() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
@@ -679,7 +682,7 @@ static void test_valid_weekday() {
         SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::January, std::chrono::weekday_indexed{std::chrono::weekday{7}, 1}});
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
@@ -712,7 +715,7 @@ static void test_valid_weekday() {
         SV("%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
         std::chrono::month_weekday{std::chrono::January, std::chrono::weekday_indexed{std::chrono::weekday{7}, 1}});
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.sys_time.pass.cpp b/libcxx/test/std/time/time.syn/formatter.sys_time.pass.cpp
index 9c9c8e0de1e9..b168a366c22b 100644
--- a/libcxx/test/std/time/time.syn/formatter.sys_time.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.sys_time.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -104,7 +107,7 @@ static void test_valid_values_year() {
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%C='19'\t%EC='19'\t%y='70'\t%Oy='70'\t%Ey='70'\t%Y='1970'\t%EY='1970'\n"),
         lfmt,
@@ -114,7 +117,7 @@ static void test_valid_values_year() {
         SV("%C='20'\t%EC='20'\t%y='09'\t%Oy='09'\t%Ey='09'\t%Y='2009'\t%EY='2009'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
   check(loc,
         SV("%C='19'\t%EC='昭和'\t%y='70'\t%Oy='七十'\t%Ey='45'\t%Y='1970'\t%EY='昭和45年'\n"),
         lfmt,
@@ -124,7 +127,7 @@ static void test_valid_values_year() {
         SV("%C='20'\t%EC='平成'\t%y='09'\t%Oy='九'\t%Ey='21'\t%Y='2009'\t%EY='平成21年'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX)||defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -164,7 +167,7 @@ static void test_valid_values_month() {
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(loc,
         SV("%b='1'\t%h='1'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -174,7 +177,7 @@ static void test_valid_values_month() {
         SV("%b='5'\t%h='5'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(_AIX)                                // _WIN32
+#elif defined(_AIX)                                // WINLOCALE
   check(loc,
         SV("%b='1月'\t%h='1月'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -184,7 +187,7 @@ static void test_valid_values_month() {
         SV("%b='5月'\t%h='5月'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(__APPLE__)                           // _WIN32
+#elif defined(__APPLE__)                           // WINLOCALE
   check(loc,
         SV("%b=' 1'\t%h=' 1'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -194,7 +197,7 @@ static void test_valid_values_month() {
         SV("%b=' 5'\t%h=' 5'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#elif defined(__FreeBSD__)                         // _WIN32
+#elif defined(__FreeBSD__)                         // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%h=' 1月'\t%B='1月'\t%m='01'\t%Om='01'\n"),
         lfmt,
@@ -204,7 +207,7 @@ static void test_valid_values_month() {
         SV("%b=' 5月'\t%h=' 5月'\t%B='5月'\t%m='05'\t%Om='05'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#else                                              // _WIN32
+#else                                              // WINLOCALE
   check(loc,
         SV("%b=' 1月'\t%h=' 1月'\t%B='1月'\t%m='01'\t%Om='一'\n"),
         lfmt,
@@ -214,7 +217,7 @@ static void test_valid_values_month() {
         SV("%b=' 5月'\t%h=' 5月'\t%B='5月'\t%m='05'\t%Om='五'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#endif                                             // _WIN32
+#endif                                             // WINLOCALE
 
   std::locale::global(std::locale::classic());
 }
@@ -248,7 +251,7 @@ static void test_valid_values_day() {
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%d='01'\t%Od='01'\t%e=' 1'\t%Oe=' 1'\n"),
         lfmt,
@@ -258,7 +261,7 @@ static void test_valid_values_day() {
         SV("%d='13'\t%Od='13'\t%e='13'\t%Oe='13'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%d='01'\t%Od='一'\t%e=' 1'\t%Oe='一'\n"),
         lfmt,
@@ -269,7 +272,7 @@ static void test_valid_values_day() {
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -316,7 +319,7 @@ static void test_valid_values_weekday() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%a='木'\t%A='木曜日'\t%u='4'\t%Ou='4'\t%w='4'\t%Ow='4'\n"),
         lfmt,
@@ -326,7 +329,7 @@ static void test_valid_values_weekday() {
         SV("%a='日'\t%A='日曜日'\t%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\n"),
         lfmt,
         std::chrono::sys_seconds(4'294'967'295s)); // 06:28:15 UTC on Sunday, 7 February 2106
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%a='木'\t%A='木曜日'\t%u='4'\t%Ou='四'\t%w='4'\t%Ow='四'\n"),
         lfmt,
@@ -336,7 +339,7 @@ static void test_valid_values_weekday() {
         SV("%a='日'\t%A='日曜日'\t%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\n"),
         lfmt,
         std::chrono::sys_seconds(4'294'967'295s)); // 06:28:15 UTC on Sunday, 7 February 2106
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -397,7 +400,7 @@ static void test_valid_values_week() {
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%U='00'\t%OU='00'\t%W='00'\t%OW='00'\n"),
         lfmt,
@@ -407,7 +410,7 @@ static void test_valid_values_week() {
         SV("%U='20'\t%OU='20'\t%W='20'\t%OW='20'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%U='00'\t%OU='〇'\t%W='00'\t%OW='〇'\n"),
         lfmt,
@@ -417,7 +420,7 @@ static void test_valid_values_week() {
         SV("%U='20'\t%OU='二十'\t%W='20'\t%OW='二十'\n"),
         lfmt,
         std::chrono::sys_seconds(2'000'000'000s)); // 03:33:20 UTC on Wednesday, 18 May 2033
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   std::locale::global(std::locale::classic());
 }
 
@@ -450,7 +453,7 @@ static void test_valid_values_iso_8601_week() {
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%g='70'\t%G='1970'\t%V='01'\t%OV='01'\n"),
         lfmt,
@@ -460,7 +463,7 @@ static void test_valid_values_iso_8601_week() {
         SV("%g='09'\t%G='2009'\t%V='07'\t%OV='07'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%g='70'\t%G='1970'\t%V='01'\t%OV='一'\n"),
         lfmt,
@@ -470,7 +473,7 @@ static void test_valid_values_iso_8601_week() {
         SV("%g='09'\t%G='2009'\t%V='07'\t%OV='七'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -514,7 +517,7 @@ static void test_valid_values_date() {
 #endif
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%D='01/01/70'\t%F='1970-01-01'\t%x='1970/01/01'\t%Ex='1970/01/01'\n"),
         lfmt,
@@ -524,7 +527,7 @@ static void test_valid_values_date() {
         SV("%D='02/13/09'\t%F='2009-02-13'\t%x='2009/02/13'\t%Ex='2009/02/13'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%D='01/01/70'\t%F='1970-01-01'\t%x='1970年01月01日'\t%Ex='昭和45年01月01日'\n"),
         lfmt,
@@ -534,7 +537,7 @@ static void test_valid_values_date() {
         SV("%D='02/13/09'\t%F='2009-02-13'\t%x='2009年02月13日'\t%Ex='平成21年02月13日'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -634,7 +637,7 @@ static void test_valid_values_time() {
 #endif
            "%R='00:00'\t"
            "%T='00:00:00'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='00:00:00'\t"
 #elif defined(_AIX)
            "%r='12:00:00 AM'\t"
@@ -664,7 +667,7 @@ static void test_valid_values_time() {
 #endif
            "%R='23:31'\t"
            "%T='23:31:30,123'\t"
-#ifdef _WIN32
+#ifdef WINLOCALE
            "%r='23:31:30'\t"
 #elif defined(_AIX)
            "%r='11:31:30 PM'\t"
@@ -681,7 +684,7 @@ static void test_valid_values_time() {
             1'234'567'890'123ms)); // 23:31:30 UTC on Friday, 13 February 2009
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='00'\t"
@@ -706,7 +709,7 @@ static void test_valid_values_time() {
 #    endif
            "%X='00時00分00秒'\t"
            "%EX='00時00分00秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='0:00:00'\t"
            "%X='0:00:00'\t"
            "%EX='0:00:00'\t"
@@ -743,7 +746,7 @@ static void test_valid_values_time() {
 #    endif
            "%X='23時31分30秒'\t"
            "%EX='23時31分30秒'\t"
-#  elif defined(_WIN32)
+#  elif defined(WINLOCALE)
            "%r='23:31:30'\t"
            "%X='23:31:30'\t"
            "%EX='23:31:30'\t"
@@ -755,7 +758,7 @@ static void test_valid_values_time() {
            "\n"),
         lfmt,
         std::chrono::hh_mm_ss(23h + 31min + 30s + 123ms));
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%H='00'\t"
            "%OH='〇'\t"
@@ -794,7 +797,7 @@ static void test_valid_values_time() {
         lfmt,
         std::chrono::sys_time<std::chrono::milliseconds>(
             1'234'567'890'123ms)); // 23:31:30 UTC on Friday, 13 February 2009
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -829,7 +832,7 @@ static void test_valid_values_date_time() {
       SV("%c=' 1 janvier 1970 à 00:00:00 UTC'\t%Ec=' 1 janvier 1970 à 00:00:00 UTC'\n"),
 #elif defined(__APPLE__)
       SV("%c='Jeu  1 jan 00:00:00 1970'\t%Ec='Jeu  1 jan 00:00:00 1970'\n"),
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
       SV("%c='01/01/1970 00:00:00'\t%Ec='01/01/1970 00:00:00'\n"),
 #elif defined(__FreeBSD__)
       SV("%c='jeu.  1 janv. 00:00:00 1970'\t%Ec='jeu.  1 janv. 00:00:00 1970'\n"),
@@ -849,7 +852,7 @@ static void test_valid_values_date_time() {
       SV("%c='13 février 2009 à 23:31:30 UTC'\t%Ec='13 février 2009 à 23:31:30 UTC'\n"),
 #elif defined(__APPLE__)
       SV("%c='Ven 13 fév 23:31:30 2009'\t%Ec='Ven 13 fév 23:31:30 2009'\n"),
-#elif defined(_WIN32)
+#elif defined(WINLOCALE)
       SV("%c='13/02/2009 23:31:30'\t%Ec='13/02/2009 23:31:30'\n"),
 #elif defined(__FreeBSD__)
       SV("%c='ven. 13 févr. 23:31:30 2009'\t%Ec='ven. 13 févr. 23:31:30 2009'\n"),
@@ -878,7 +881,7 @@ static void test_valid_values_date_time() {
         SV("%c='2009年02月13日 23:31:30 UTC'\t%Ec='2009年02月13日 23:31:30 UTC'\n"),
         lfmt,
         std::chrono::sys_seconds(1'234'567'890s)); // 23:31:30 UTC on Friday, 13 February 2009
-#elif defined(_WIN32)                              // defined(__APPLE__)|| defined(__FreeBSD__)
+#elif defined(WINLOCALE)                           // defined(__APPLE__)|| defined(__FreeBSD__)
   check(loc,
         SV("%c='1970/01/01 0:00:00'\t%Ec='1970/01/01 0:00:00'\n"),
         lfmt,
diff --git a/libcxx/test/std/time/time.syn/formatter.weekday.pass.cpp b/libcxx/test/std/time/time.syn/formatter.weekday.pass.cpp
index 4f232ee481a2..26524a6e82bd 100644
--- a/libcxx/test/std/time/time.syn/formatter.weekday.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.weekday.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT Investigate Windows issues.
 // XFAIL: msvc
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -92,7 +95,7 @@ static void test_valid_values() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc, SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"), lfmt, std::chrono::weekday(0));
   check(loc, SV("%u='1'\t%Ou='1'\t%w='1'\t%Ow='1'\t%a='月'\t%A='月曜日'\n"), lfmt, std::chrono::weekday(1));
   check(loc, SV("%u='2'\t%Ou='2'\t%w='2'\t%Ow='2'\t%a='火'\t%A='火曜日'\n"), lfmt, std::chrono::weekday(2));
@@ -153,7 +156,7 @@ static void test_invalid_values() {
   // Use supplied locale (ja_JP). This locale has a different alternate.
   check(loc, SV("%u='8'\t%Ou='8'\t%w='8'\t%Ow='8'\n"), lfmt, std::chrono::weekday(8));
   check(loc, SV("%u='5'\t%Ou='5'\t%w='5'\t%Ow='5'\n"), lfmt, std::chrono::weekday(255));
-#elif defined(_WIN32) // defined(__APPLE__) || defined(__FreeBSD__)
+#elif defined(WINLOCALE) // defined(__APPLE__) || defined(__FreeBSD__)
   // Non localized output using C-locale
   check(SV("%u=''\t%Ou=''\t%w=''\t%Ow=''\n"), fmt, std::chrono::weekday(8));
   check(SV("%u=''\t%Ou=''\t%w=''\t%Ow=''\n"), fmt, std::chrono::weekday(255));
diff --git a/libcxx/test/std/time/time.syn/formatter.weekday_index.pass.cpp b/libcxx/test/std/time/time.syn/formatter.weekday_index.pass.cpp
index 3ebc2671be3f..3062fd5df764 100644
--- a/libcxx/test/std/time/time.syn/formatter.weekday_index.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.weekday_index.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT Investigate Windows issues.
 // XFAIL: msvc
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -156,7 +159,7 @@ static void test_valid_values() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
@@ -189,7 +192,7 @@ static void test_valid_values() {
         SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
         std::chrono::weekday_indexed{std::chrono::weekday(7), 7});
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
@@ -222,7 +225,7 @@ static void test_valid_values() {
         SV("%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
         std::chrono::weekday_indexed{std::chrono::weekday(7), 7});
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -283,7 +286,7 @@ static void test_invalid_values() {
           SV("%u='255'\t%Ou='255'\t%w='255'\t%Ow='255'\n"),
           lfmt,
           std::chrono::weekday_indexed{std::chrono::weekday(255), 1});
-#elif defined(_WIN32) //  defined(__APPLE__) || defined(__FreeBSD__)
+#elif defined(WINLOCALE) //  defined(__APPLE__) || defined(__FreeBSD__)
     // Non localized output using C-locale
     check(SV("%u=''\t%Ou=''\t%w=''\t%Ow=''\n"), fmt, std::chrono::weekday_indexed{std::chrono::weekday(8), 0});
     check(SV("%u=''\t%Ou=''\t%w=''\t%Ow=''\n"), fmt, std::chrono::weekday_indexed{std::chrono::weekday(8), 1});
diff --git a/libcxx/test/std/time/time.syn/formatter.weekday_last.pass.cpp b/libcxx/test/std/time/time.syn/formatter.weekday_last.pass.cpp
index c8f68aa925aa..e95a4419032d 100644
--- a/libcxx/test/std/time/time.syn/formatter.weekday_last.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.weekday_last.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT Investigate Windows issues.
 // XFAIL: msvc
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -139,7 +142,7 @@ static void test_valid_values() {
 
   // Use supplied locale (ja_JP).
   // This locale has a different alternate, but not on all platforms
-#if defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#if defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
@@ -172,7 +175,7 @@ static void test_valid_values() {
         SV("%u='7'\t%Ou='7'\t%w='0'\t%Ow='0'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
         std::chrono::weekday_last{std::chrono::weekday(7)});
-#else  // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#else  // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
   check(loc,
         SV("%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
@@ -205,7 +208,7 @@ static void test_valid_values() {
         SV("%u='7'\t%Ou='七'\t%w='0'\t%Ow='〇'\t%a='日'\t%A='日曜日'\n"),
         lfmt,
         std::chrono::weekday_last{std::chrono::weekday(7)});
-#endif // defined(_WIN32) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
+#endif // defined(WINLOCALE) || defined(__APPLE__) || defined(_AIX) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
@@ -247,7 +250,7 @@ static void test_invalid_values() {
         SV("%u='255'\t%Ou='255'\t%w='255'\t%Ow='255'\n"),
         lfmt,
         std::chrono::weekday_last{std::chrono::weekday(255)});
-#elif defined(_WIN32) // defined(__APPLE__) || defined(__FreeBSD__)
+#elif defined(WINLOCALE) // defined(__APPLE__) || defined(__FreeBSD__)
   // Non localized output using C-locale
   check(SV("%u=''\t%Ou=''\t%w=''\t%Ow=''\n"), fmt, std::chrono::weekday_last{std::chrono::weekday(8)});
   check(SV("%u=''\t%Ou=''\t%w=''\t%Ow=''\n"), fmt, std::chrono::weekday_last{std::chrono::weekday(255)});
diff --git a/libcxx/test/std/time/time.syn/formatter.year.pass.cpp b/libcxx/test/std/time/time.syn/formatter.year.pass.cpp
index e1a7d788f9db..8b442618673c 100644
--- a/libcxx/test/std/time/time.syn/formatter.year.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.year.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -82,7 +85,7 @@ static void test_valid_values() {
 
   // Non localized output using C-locale
   check(SV("%C='00'\t"
-#if defined(__APPLE__) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(WINLOCALE) || defined(__FreeBSD__)
            "%EC='00'\t"
 #else
            "%EC='0'\t"
@@ -91,7 +94,7 @@ static void test_valid_values() {
            "%Ey='00'\t"
            "%Oy='00'\t"
            "%Y='0000'\t"
-#if defined(__APPLE__) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(WINLOCALE) || defined(__FreeBSD__)
            "%EY='0000'\t"
 #elif defined(_AIX)
            "%EY=''\t"
@@ -126,7 +129,7 @@ static void test_valid_values() {
 
   // Use the global locale (fr_FR)
   check(SV("%C='00'\t"
-#if defined(__APPLE__) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(WINLOCALE) || defined(__FreeBSD__)
            "%EC='00'\t"
 #else
            "%EC='0'\t"
@@ -135,7 +138,7 @@ static void test_valid_values() {
            "%Ey='00'\t"
            "%Oy='00'\t"
            "%Y='0000'\t"
-#if defined(__APPLE__) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(WINLOCALE) || defined(__FreeBSD__)
            "%EY='0000'\t"
 #elif defined(_AIX)
            "%EY=''\t"
@@ -169,10 +172,10 @@ static void test_valid_values() {
         std::chrono::year{2038});
 
   // Use supplied locale (ja_JP). This locale has a different alternate.
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   check(SV("%C='00'\t"
-#  if defined(__APPLE__) || defined(_WIN32) || defined(__FreeBSD__)
+#  if defined(__APPLE__) || defined(WINLOCALE) || defined(__FreeBSD__)
            "%EC='00'\t"
 #  else
            "%EC='0'\t"
@@ -212,7 +215,7 @@ static void test_valid_values() {
         lfmt,
         std::chrono::year{2038});
 
-#else // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
   check(loc,
         SV("%C='00'\t"
            "%EC='紀元前'\t"
@@ -259,7 +262,7 @@ static void test_valid_values() {
            "\n"),
         lfmt,
         std::chrono::year{2038});
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
 
   std::locale::global(std::locale::classic());
 }
diff --git a/libcxx/test/std/time/time.syn/formatter.year_month.pass.cpp b/libcxx/test/std/time/time.syn/formatter.year_month.pass.cpp
index 96b654d828b4..ab094733aa9c 100644
--- a/libcxx/test/std/time/time.syn/formatter.year_month.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.year_month.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -166,39 +169,39 @@ static void test_valid_values() {
   // Use supplied locale (ja_JP)
   check(loc,
         SV(
-#if defined(_WIN32)
+#if defined(WINLOCALE)
             "%b='1'\t"
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)      // defined(WINLOCALE)
             "%b='1月'\t"
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__) // defined(WINLOCALE)
             "%b=' 1'\t"
-#else                    // defined(_WIN32)
+#else                    // defined(WINLOCALE)
             "%b=' 1月'\t"
-#endif                   // defined(_WIN32)
+#endif                   // defined(WINLOCALE)
             "%B='1月'\t"
             "%C='19'\t"
-#if defined(_WIN32)
+#if defined(WINLOCALE)
             "%h='1'\t"
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)      // defined(WINLOCALE)
             "%h='1月'\t"
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__) // defined(WINLOCALE)
             "%h=' 1'\t"
-#else                    // defined(_WIN32)
+#else                    // defined(WINLOCALE)
             "%h=' 1月'\t"
-#endif                   // defined(_WIN32)
+#endif                   // defined(WINLOCALE)
             "%y='70'\t"
             "%Y='1970'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
             "%EC='19'\t"
             "%Ey='70'\t"
             "%EY='1970'\t"
             "%Oy='70'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
             "%EC='昭和'\t"
             "%Ey='45'\t"
             "%EY='昭和45年'\t"
             "%Oy='七十'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
             "\n"),
         lfmt,
         std::chrono::year_month{std::chrono::year{1970}, std::chrono::January});
@@ -206,39 +209,39 @@ static void test_valid_values() {
   check(loc,
         SV(
 
-#if defined(_WIN32)
+#if defined(WINLOCALE)
             "%b='5'\t"
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)      // defined(WINLOCALE)
             "%b='5月'\t"
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__) // defined(WINLOCALE)
             "%b=' 5'\t"
-#else                    // defined(_WIN32)
+#else                    // defined(WINLOCALE)
             "%b=' 5月'\t"
-#endif                   // defined(_WIN32)
+#endif                   // defined(WINLOCALE)
             "%B='5月'\t"
             "%C='20'\t"
-#if defined(_WIN32)
+#if defined(WINLOCALE)
             "%h='5'\t"
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)      // defined(WINLOCALE)
             "%h='5月'\t"
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__) // defined(WINLOCALE)
             "%h=' 5'\t"
-#else                    // defined(_WIN32)
+#else                    // defined(WINLOCALE)
             "%h=' 5月'\t"
-#endif                   // defined(_WIN32)
+#endif                   // defined(WINLOCALE)
             "%y='04'\t"
             "%Y='2004'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
             "%EC='20'\t"
             "%Ey='04'\t"
             "%EY='2004'\t"
             "%Oy='04'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
             "%EC='平成'\t"
             "%Ey='16'\t"
             "%EY='平成16年'\t"
             "%Oy='四'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
             "\n"),
         lfmt,
         std::chrono::year_month{std::chrono::year{2004}, std::chrono::May});
diff --git a/libcxx/test/std/time/time.syn/formatter.year_month_day.pass.cpp b/libcxx/test/std/time/time.syn/formatter.year_month_day.pass.cpp
index 95e1795b573b..1834a5870eed 100644
--- a/libcxx/test/std/time/time.syn/formatter.year_month_day.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.year_month_day.pass.cpp
@@ -16,6 +16,9 @@
 // TODO FMT Investigate Windows issues.
 // XFAIL: msvc
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -396,7 +399,7 @@ static void test_valid_md_values() {
   std::locale::global(std::locale(LOCALE_fr_FR_UTF_8));
 
   // Non localized output using C-locale
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(SV("%b='Jan'\t%B='January'\t%h='Jan'\t%m='01'\t%Om='01'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         fmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::January, std::chrono::day{0}});
@@ -426,7 +429,7 @@ static void test_valid_md_values() {
   check(SV("%b='Aug'\t%B='August'\t%h='Aug'\t%m='08'\t%Om='08'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         fmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::August, std::chrono::day{31}});
-#ifdef _WIN32
+#ifdef WINLOCALE
   check(SV("%b='Sep'\t%B='September'\t%h='Sep'\t%m='09'\t%Om='09'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         fmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::September, std::chrono::day{32}});
@@ -439,7 +442,7 @@ static void test_valid_md_values() {
   check(SV("%b='Dec'\t%B='December'\t%h='Dec'\t%m='12'\t%Om='12'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         fmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#else // _WIN32
+#else // WINLOCALE
   check(SV("%b='Sep'\t%B='September'\t%h='Sep'\t%m='09'\t%Om='09'\t%d='32'\t%e='32'\t%Od='32'\t%Oe='32'\n"),
         fmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::September, std::chrono::day{32}});
@@ -461,7 +464,7 @@ static void test_valid_md_values() {
         fmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
 #  endif //  defined(_AIX)
-#endif   // _WIN32
+#endif   // WINLOCALE
 
   // Use the global locale (fr_FR)
 #if defined(__APPLE__)
@@ -502,7 +505,7 @@ static void test_valid_md_values() {
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
 #else // defined(__APPLE__)
-#  ifdef _WIN32
+#  ifdef WINLOCALE
   check(SV("%b='janv.'\t%B='janvier'\t%h='janv.'\t%m='01'\t%Om='01'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::January, std::chrono::day{0}});
@@ -518,11 +521,11 @@ static void test_valid_md_values() {
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::March, std::chrono::day{9}});
   check(
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avr.'\t%B='avril'\t%h='avr.'\t%m='04'\t%Om='04'\t%d='10'\t%e='10'\t%Od='10'\t%Oe='10'\n"),
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avril'\t%B='avril'\t%h='avril'\t%m='04'\t%Om='04'\t%d='10'\t%e='10'\t%Od='10'\t%Oe='10'\n"),
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       lfmt,
       std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::April, std::chrono::day{10}});
   check(SV("%b='mai'\t%B='mai'\t%h='mai'\t%m='05'\t%Om='05'\t%d='28'\t%e='28'\t%Od='28'\t%Oe='28'\n"),
@@ -537,7 +540,7 @@ static void test_valid_md_values() {
   check(SV("%b='août'\t%B='août'\t%h='août'\t%m='08'\t%Om='08'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::August, std::chrono::day{31}});
-#  ifdef _WIN32
+#  ifdef WINLOCALE
   check(SV("%b='sept.'\t%B='septembre'\t%h='sept.'\t%m='09'\t%Om='09'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::September, std::chrono::day{32}});
@@ -550,7 +553,7 @@ static void test_valid_md_values() {
   check(SV("%b='déc.'\t%B='décembre'\t%h='déc.'\t%m='12'\t%Om='12'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#  else // _WIN32
+#  else // WINLOCALE
   check(SV("%b='sept.'\t%B='septembre'\t%h='sept.'\t%m='09'\t%Om='09'\t%d='32'\t%e='32'\t%Od='32'\t%Oe='32'\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::September, std::chrono::day{32}});
@@ -572,11 +575,11 @@ static void test_valid_md_values() {
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
 #    endif //   defined(_AIX)
-#  endif   // _WIN32
+#  endif   // WINLOCALE
 #endif     // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(loc,
         SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
@@ -625,7 +628,7 @@ static void test_valid_md_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\t%d=''\t%e=''\t%Od=''\t%Oe=''\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)        // defined(WINLOCALE)
   check(loc,
         SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\t%d='00'\t%e=' 0'\t%Od='00'\t%Oe=' 0'\n"),
         lfmt,
@@ -674,7 +677,7 @@ static void test_valid_md_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\t%d='55'\t%e='55'\t%Od='55'\t%Oe='55'\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#elif defined(__FreeBSD__) // defined(_WIN32)
+#elif defined(__FreeBSD__) // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\t%d='00'\t%e=' 0'\t%Od='00'\t%Oe=' 0'\n"),
         lfmt,
@@ -723,7 +726,7 @@ static void test_valid_md_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\t%d='255'\t%e='255'\t%Od='255'\t%Oe='255'\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__)   // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\t%d='00'\t%e=' 0'\t%Od='00'\t%Oe=' 0'\n"),
         lfmt,
@@ -772,7 +775,7 @@ static void test_valid_md_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\t%d='255'\t%e='255'\t%Od='255'\t%Oe='255'\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#else                    // defined(_WIN32)
+#else                      // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\t%d='00'\t%e=' 0'\t%Od='〇'\t%Oe='〇'\n"),
         lfmt,
@@ -821,7 +824,7 @@ static void test_valid_md_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='十二'\t%d='255'\t%e='255'\t%Od='255'\t%Oe='255'\n"),
         lfmt,
         std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::December, std::chrono::day{255}});
-#endif                   //  defined(_WIN32)
+#endif                     //  defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
@@ -1035,14 +1038,14 @@ static void test_valid_ymd_values() {
          "%V='01'\t"
          "%w='4'\t"
          "%W='00'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='1970/01/01'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='1970年01月01日'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%y='70'\t"
          "%Y='1970'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='1970/01/01'\t"
          "%EC='19'\t"
          "%Ey='70'\t"
@@ -1053,7 +1056,7 @@ static void test_valid_ymd_values() {
          "%Ow='4'\t"
          "%OW='00'\t"
          "%Oy='70'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='昭和45年01月01日'\t"
          "%EC='昭和'\t"
          "%Ey='45'\t"
@@ -1064,7 +1067,7 @@ static void test_valid_ymd_values() {
          "%Ow='四'\t"
          "%OW='〇'\t"
          "%Oy='七十'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "\n"),
       lfmt,
       std::chrono::year_month_day{std::chrono::year{1970}, std::chrono::January, std::chrono::day{1}});
@@ -1082,14 +1085,14 @@ static void test_valid_ymd_values() {
          "%V='22'\t"
          "%w='6'\t"
          "%W='21'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='2004/05/29'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='2004年05月29日'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%y='04'\t"
          "%Y='2004'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='2004/05/29'\t"
          "%EC='20'\t"
          "%Ey='04'\t"
@@ -1100,7 +1103,7 @@ static void test_valid_ymd_values() {
          "%Ow='6'\t"
          "%OW='21'\t"
          "%Oy='04'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='平成16年05月29日'\t"
          "%EC='平成'\t"
          "%Ey='16'\t"
@@ -1111,7 +1114,7 @@ static void test_valid_ymd_values() {
          "%Ow='六'\t"
          "%OW='二十一'\t"
          "%Oy='四'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "\n"),
       lfmt,
       std::chrono::year_month_day{std::chrono::year{2004}, std::chrono::May, std::chrono::day{29}});
diff --git a/libcxx/test/std/time/time.syn/formatter.year_month_day_last.pass.cpp b/libcxx/test/std/time/time.syn/formatter.year_month_day_last.pass.cpp
index e31ed5271cd2..6ad7b57d1c67 100644
--- a/libcxx/test/std/time/time.syn/formatter.year_month_day_last.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.year_month_day_last.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -346,11 +349,11 @@ static void test_valid_md_values() {
         lfmt,
         std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::March}});
   check(
-#  if defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  if defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avr.'\t%B='avril'\t%h='avr.'\t%m='04'\t%Om='04'\t%d='30'\t%e='30'\t%Od='30'\t%Oe='30'\n"),
-#  else  // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  else  // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       SV("%b='avril'\t%B='avril'\t%h='avril'\t%m='04'\t%Om='04'\t%d='30'\t%e='30'\t%Od='30'\t%Oe='30'\n"),
-#  endif // defined(_WIN32) || defined(_AIX) || defined(__FreeBSD__)
+#  endif // defined(WINLOCALE) || defined(_AIX) || defined(__FreeBSD__)
       lfmt,
       std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::April}});
   check(SV("%b='mai'\t%B='mai'\t%h='mai'\t%m='05'\t%Om='05'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
@@ -380,7 +383,7 @@ static void test_valid_md_values() {
 #endif   // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(loc,
         SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
@@ -429,7 +432,7 @@ static void test_valid_md_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
         std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::December}});
-#elif defined(_AIX)      // defined(_WIN32)
+#elif defined(_AIX)        // defined(WINLOCALE)
   check(loc,
         SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
@@ -478,7 +481,7 @@ static void test_valid_md_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
         std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::December}});
-#elif defined(__FreeBSD__) // defined(_WIN32)
+#elif defined(__FreeBSD__) // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
@@ -527,7 +530,7 @@ static void test_valid_md_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='12'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
         std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::December}});
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__)   // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
@@ -576,7 +579,7 @@ static void test_valid_md_values() {
         SV("%b='12'\t%B='12月'\t%h='12'\t%m='12'\t%Om='12'\t%d='31'\t%e='31'\t%Od='31'\t%Oe='31'\n"),
         lfmt,
         std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::December}});
-#else                    // defined(_WIN32)
+#else                      // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\t%d='31'\t%e='31'\t%Od='三十一'\t%Oe='三十一'\n"),
         lfmt,
@@ -625,7 +628,7 @@ static void test_valid_md_values() {
         SV("%b='12月'\t%B='12月'\t%h='12月'\t%m='12'\t%Om='十二'\t%d='31'\t%e='31'\t%Od='三十一'\t%Oe='三十一'\n"),
         lfmt,
         std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::December}});
-#endif                   //  defined(_WIN32)
+#endif                     //  defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
@@ -839,14 +842,14 @@ static void test_valid_ymd_values() {
          "%V='05'\t"
          "%w='6'\t"
          "%W='04'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='1970/01/31'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='1970年01月31日'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%y='70'\t"
          "%Y='1970'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='1970/01/31'\t"
          "%EC='19'\t"
          "%Ey='70'\t"
@@ -857,7 +860,7 @@ static void test_valid_ymd_values() {
          "%Ow='6'\t"
          "%OW='04'\t"
          "%Oy='70'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='昭和45年01月31日'\t"
          "%EC='昭和'\t"
          "%Ey='45'\t"
@@ -868,7 +871,7 @@ static void test_valid_ymd_values() {
          "%Ow='六'\t"
          "%OW='四'\t"
          "%Oy='七十'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "\n"),
       lfmt,
       std::chrono::year_month_day_last{std::chrono::year{1970}, std::chrono::month_day_last{std::chrono::January}});
@@ -886,14 +889,14 @@ static void test_valid_ymd_values() {
          "%V='23'\t"
          "%w='1'\t"
          "%W='22'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='2004/05/31'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='2004年05月31日'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%y='04'\t"
          "%Y='2004'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='2004/05/31'\t"
          "%EC='20'\t"
          "%Ey='04'\t"
@@ -904,7 +907,7 @@ static void test_valid_ymd_values() {
          "%Ow='1'\t"
          "%OW='22'\t"
          "%Oy='04'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='平成16年05月31日'\t"
          "%EC='平成'\t"
          "%Ey='16'\t"
@@ -915,7 +918,7 @@ static void test_valid_ymd_values() {
          "%Ow='一'\t"
          "%OW='二十二'\t"
          "%Oy='四'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "\n"),
       lfmt,
       std::chrono::year_month_day_last{std::chrono::year{2004}, std::chrono::month_day_last{std::chrono::May}});
diff --git a/libcxx/test/std/time/time.syn/formatter.year_month_weekday.pass.cpp b/libcxx/test/std/time/time.syn/formatter.year_month_weekday.pass.cpp
index 38a9538bbd76..dfac59d301f6 100644
--- a/libcxx/test/std/time/time.syn/formatter.year_month_weekday.pass.cpp
+++ b/libcxx/test/std/time/time.syn/formatter.year_month_weekday.pass.cpp
@@ -13,6 +13,9 @@
 // TODO FMT This test should not require std::to_chars(floating-point)
 // XFAIL: availability-fp_to_chars-missing
 
+// Cygwin's locale slightly differs from others
+// XFAIL: LIBCXX-CYGWIN-FIXME
+
 // REQUIRES: locale.fr_FR.UTF-8
 // REQUIRES: locale.ja_JP.UTF-8
 
@@ -314,7 +317,7 @@ static void test_valid_md_values() {
 #endif // defined(__APPLE__)
 
   // Use supplied locale (ja_JP)
-#if defined(_WIN32)
+#if defined(WINLOCALE)
   check(loc,
         SV("%b='1'\t%B='1月'\t%h='1'\t%m='01'\t%Om='01'\t%d='01'\t%e=' 1'\t%Od='01'\t%Oe=' 1'\n"),
         lfmt,
@@ -327,7 +330,7 @@ static void test_valid_md_values() {
         std::chrono::year_month_weekday{
             std::chrono::year{1970}, std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{7}, 3}});
 
-#elif defined(_AIX) // defined(_WIN32)
+#elif defined(_AIX) // defined(WINLOCALE)
   check(loc,
         SV("%b='1月'\t%B='1月'\t%h='1月'\t%m='01'\t%Om='01'\t%d='01'\t%e=' 1'\t%Od='01'\t%Oe=' 1'\n"),
         lfmt,
@@ -340,7 +343,7 @@ static void test_valid_md_values() {
         std::chrono::year_month_weekday{
             std::chrono::year{1970}, std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{7}, 3}});
 
-#elif defined(__APPLE__) // defined(_WIN32)
+#elif defined(__APPLE__) // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1'\t%B='1月'\t%h=' 1'\t%m='01'\t%Om='01'\t%d='01'\t%e=' 1'\t%Od='01'\t%Oe=' 1'\n"),
         lfmt,
@@ -353,7 +356,7 @@ static void test_valid_md_values() {
         std::chrono::year_month_weekday{
             std::chrono::year{1970}, std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{7}, 3}});
 
-#elif defined(__FreeBSD__) // defined(_WIN32)
+#elif defined(__FreeBSD__) // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='01'\t%d='01'\t%e=' 1'\t%Od='01'\t%Oe=' 1'\n"),
         lfmt,
@@ -365,7 +368,7 @@ static void test_valid_md_values() {
         lfmt,
         std::chrono::year_month_weekday{
             std::chrono::year{1970}, std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{7}, 3}});
-#else                    // defined(_WIN32)
+#else                      // defined(WINLOCALE)
   check(loc,
         SV("%b=' 1月'\t%B='1月'\t%h=' 1月'\t%m='01'\t%Om='一'\t%d='01'\t%e=' 1'\t%Od='一'\t%Oe='一'\n"),
         lfmt,
@@ -378,7 +381,7 @@ static void test_valid_md_values() {
         std::chrono::year_month_weekday{
             std::chrono::year{1970}, std::chrono::December, std::chrono::weekday_indexed{std::chrono::weekday{7}, 3}});
 
-#endif                   //  defined(_WIN32)
+#endif //  defined(WINLOCALE)
 
   std::locale::global(std::locale::classic());
 }
@@ -596,14 +599,14 @@ static void test_valid_ymd_values() {
          "%V='01'\t"
          "%w='4'\t"
          "%W='00'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='1970/01/01'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='1970年01月01日'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%y='70'\t"
          "%Y='1970'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='1970/01/01'\t"
          "%EC='19'\t"
          "%Ey='70'\t"
@@ -614,7 +617,7 @@ static void test_valid_ymd_values() {
          "%Ow='4'\t"
          "%OW='00'\t"
          "%Oy='70'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='昭和45年01月01日'\t"
          "%EC='昭和'\t"
          "%Ey='45'\t"
@@ -625,7 +628,7 @@ static void test_valid_ymd_values() {
          "%Ow='四'\t"
          "%OW='〇'\t"
          "%Oy='七十'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "\n"),
       lfmt,
       std::chrono::year_month_weekday{
@@ -644,14 +647,14 @@ static void test_valid_ymd_values() {
          "%V='22'\t"
          "%w='6'\t"
          "%W='21'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='2004/05/29'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%x='2004年05月29日'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%y='04'\t"
          "%Y='2004'\t"
-#if defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='2004/05/29'\t"
          "%EC='20'\t"
          "%Ey='04'\t"
@@ -662,7 +665,7 @@ static void test_valid_ymd_values() {
          "%Ow='6'\t"
          "%OW='21'\t"
          "%Oy='04'\t"
-#else  // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#else  // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "%Ex='平成16年05月29日'\t"
          "%EC='平成'\t"
          "%Ey='16'\t"
@@ -673,7 +676,7 @@ static void test_valid_ymd_values() {
          "%Ow='六'\t"
          "%OW='二十一'\t"
          "%Oy='四'\t"
-#endif // defined(__APPLE__) || defined(_AIX) || defined(_WIN32) || defined(__FreeBSD__)
+#endif // defined(__APPLE__) || defined(_AIX) || defined(WINLOCALE) || defined(__FreeBSD__)
          "\n"),
       lfmt,
       std::chrono::year_month_weekday{
diff --git a/libcxx/test/support/locale_helpers.h b/libcxx/test/support/locale_helpers.h
index 946c2fed0f3a..821b1058b707 100644
--- a/libcxx/test/support/locale_helpers.h
+++ b/libcxx/test/support/locale_helpers.h
@@ -42,7 +42,7 @@ std::wstring convert_thousands_sep(std::wstring const& in, wchar_t sep) {
 }
 
 std::wstring negate_en_US(std::wstring s) {
-#if defined(_WIN32)
+#  if defined(_WIN32) || defined(__CYGWIN__)
   return L"(" + s + L")";
 #else
   return L"-" + s;
@@ -58,7 +58,7 @@ wchar_t decimal_point_or_default(std::wstring s) { return !s.empty() ? s[0] : L'
 #endif // TEST_HAS_NO_WIDE_CHARACTERS
 
 std::string negate_en_US(std::string s) {
-#if defined(_WIN32)
+#if defined(_WIN32) || defined(__CYGWIN__)
   return "(" + s + ")";
 #else
   return "-" + s;
@@ -71,7 +71,7 @@ MultiStringType currency_symbol_ru_RU() {
     return MKSTR("\u0440\u0443\u0431");
   else
     return MKSTR("\u20BD"); // U+20BD RUBLE SIGN
-#elif defined(_WIN32) || defined(__FreeBSD__) || defined(_AIX)
+#elif defined(_WIN32) || defined(__FreeBSD__) || defined(_AIX) || defined(__CYGWIN__)
   return MKSTR("\u20BD"); // U+20BD RUBLE SIGN
 #else
   return MKSTR("\u0440\u0443\u0431.");
@@ -79,7 +79,7 @@ MultiStringType currency_symbol_ru_RU() {
 }
 
 MultiStringType currency_symbol_zh_CN() {
-#if defined(_WIN32)
+#if defined(_WIN32) || defined(__CYGWIN__)
   return MKSTR("\u00A5"); // U+00A5 YEN SIGN
 #else
   return MKSTR("\uFFE5"); // U+FFE5 FULLWIDTH YEN SIGN
diff --git a/libcxx/test/support/platform_support.h b/libcxx/test/support/platform_support.h
index 99e60f60c599..405dfb1755c4 100644
--- a/libcxx/test/support/platform_support.h
+++ b/libcxx/test/support/platform_support.h
@@ -25,6 +25,9 @@
 #elif defined(_WIN32)
 #    define LOCALE_fr_CA_ISO8859_1 "fr-CA"
 #    define LOCALE_cs_CZ_ISO8859_2 "cs-CZ"
+#elif defined(__CYGWIN__)
+#  define LOCALE_fr_CA_ISO8859_1 "fr_CA"
+#  define LOCALE_cs_CZ_ISO8859_2 "cs_CZ"
 #else
 #    define LOCALE_fr_CA_ISO8859_1 "fr_CA.ISO8859-1"
 #    define LOCALE_cs_CZ_ISO8859_2 "cs_CZ.ISO8859-2"
@@ -33,6 +36,10 @@
 #define LOCALE_ru_RU_UTF_8     "ru_RU.UTF-8"
 #define LOCALE_zh_CN_UTF_8     "zh_CN.UTF-8"
 
+#if defined(_WIN32) || defined(__CYGWIN__)
+#  define WINLOCALE
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string>
diff --git a/libcxx/utils/libcxx/test/features.py b/libcxx/utils/libcxx/test/features.py
index 179572521248..34e8afeffeb0 100644
--- a/libcxx/utils/libcxx/test/features.py
+++ b/libcxx/utils/libcxx/test/features.py
@@ -218,6 +218,10 @@ DEFAULT_FEATURES = [
           """,
         ),
     ),
+    Feature(
+        name="LIBCXX-CYGWIN-FIXME",
+        when=lambda cfg: "__CYGWIN__" in compilerMacros(cfg),
+    ),
     # Check for a Windows UCRT bug (fixed in UCRT/Windows 10.0.20348.0):
     # https://developercommunity.visualstudio.com/t/utf-8-locales-break-ctype-functions-for-wchar-type/1653678
     Feature(
-- 
2.51.0

