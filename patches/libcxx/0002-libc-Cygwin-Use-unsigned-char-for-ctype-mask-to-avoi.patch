From fb3eac3f4258f795a980a900c2cd782afcdd2a79 Mon Sep 17 00:00:00 2001
From: kikairoya <kikairoya@gmail.com>
Date: Sun, 8 Jun 2025 22:30:56 +0900
Subject: [PATCH 02/15] [libc++][Cygwin] Use unsigned char for ctype mask to
 avoid sign-extension

---
 libcxx/include/__locale | 5 +++++
 libcxx/src/locale.cpp   | 5 +++++
 2 files changed, 10 insertions(+)

diff --git a/libcxx/include/__locale b/libcxx/include/__locale
index eb7b7786208e..99c7bc2748dc 100644
--- a/libcxx/include/__locale
+++ b/libcxx/include/__locale
@@ -390,8 +390,13 @@ public:
   static const mask blank        = _ISBLANK;
   static const mask __regex_word = 0x8000;
 #  elif defined(_NEWLIB_VERSION)
+#    if !defined(__CYGWIN__)
   // Same type as Newlib's _ctype_ array in newlib/libc/include/ctype.h.
   typedef char mask;
+#    else
+  // ..but on Cygwin, char is signed so need to use unsigned that to avoid sign-extension.
+  typedef unsigned char mask;
+#    endif
   // In case char is signed, static_cast is needed to avoid warning on
   // positive value becomming negative.
   static const mask space  = static_cast<mask>(_S);
diff --git a/libcxx/src/locale.cpp b/libcxx/src/locale.cpp
index 0f695d4f1a22..1146cc307a1d 100644
--- a/libcxx/src/locale.cpp
+++ b/libcxx/src/locale.cpp
@@ -920,8 +920,13 @@ const ctype<char>::mask* ctype<char>::classic_table() noexcept {
 #  elif defined(__EMSCRIPTEN__)
   return *__ctype_b_loc();
 #  elif defined(_NEWLIB_VERSION)
+#    if !defined(__CYGWIN__)
   // Newlib has a 257-entry table in ctype_.c, where (char)0 starts at [1].
   return _ctype_ + 1;
+#    else
+  // Cygwin also uses newlib but need a casting to unsigned to avoid sign-extension
+  return (const unsigned char *)_ctype_ + 1;
+#    endif
 #  elif defined(_AIX)
   return (const unsigned int*)__lc_ctype_ptr->obj->mask;
 #  elif defined(__MVS__)
-- 
2.51.1

