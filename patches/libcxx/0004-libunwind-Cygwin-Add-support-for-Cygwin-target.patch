From 31a4095773788d6c323c6282c42b1dab711c8428 Mon Sep 17 00:00:00 2001
From: kikairoya <kikairoya@gmail.com>
Date: Sat, 31 May 2025 23:08:39 +0900
Subject: [PATCH 04/15] [libunwind][Cygwin] Add support for Cygwin target

---
 libunwind/include/__libunwind_config.h |  2 +-
 libunwind/include/libunwind.h          |  2 +-
 libunwind/include/unwind.h             |  3 ++-
 libunwind/src/AddressSpace.hpp         | 20 ++++++++++++--------
 libunwind/src/CMakeLists.txt           |  3 +++
 libunwind/src/Registers.hpp            | 10 +++++-----
 libunwind/src/Unwind-seh.cpp           |  4 ++--
 libunwind/src/UnwindCursor.hpp         | 14 ++++++++------
 libunwind/src/UnwindRegistersRestore.S |  4 ++--
 libunwind/src/UnwindRegistersSave.S    |  4 ++--
 libunwind/src/assembly.h               | 10 ++++++++--
 libunwind/src/config.h                 | 18 +++++++++++-------
 libunwind/test/signal_frame.pass.cpp   |  1 +
 13 files changed, 58 insertions(+), 37 deletions(-)

diff --git a/libunwind/include/__libunwind_config.h b/libunwind/include/__libunwind_config.h
index 343934e88536..4a485d212b79 100644
--- a/libunwind/include/__libunwind_config.h
+++ b/libunwind/include/__libunwind_config.h
@@ -46,7 +46,7 @@
 #  define _LIBUNWIND_HIGHEST_DWARF_REGISTER _LIBUNWIND_HIGHEST_DWARF_REGISTER_X86
 # elif defined(__x86_64__)
 #  define _LIBUNWIND_TARGET_X86_64 1
-#  if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
 #    define _LIBUNWIND_CONTEXT_SIZE 54
 #    ifdef __SEH__
 #      define _LIBUNWIND_CURSOR_SIZE 204
diff --git a/libunwind/include/libunwind.h b/libunwind/include/libunwind.h
index 18684ce311f9..468044d993ad 100644
--- a/libunwind/include/libunwind.h
+++ b/libunwind/include/libunwind.h
@@ -146,7 +146,7 @@
 
 #endif
 
-#if defined(_WIN32) && defined(__SEH__)
+#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(__SEH__)
   #define LIBUNWIND_CURSOR_ALIGNMENT_ATTR __attribute__((__aligned__(16)))
 #else
   #define LIBUNWIND_CURSOR_ALIGNMENT_ATTR
diff --git a/libunwind/include/unwind.h b/libunwind/include/unwind.h
index b1775d3a3dec..94dda313cc4b 100644
--- a/libunwind/include/unwind.h
+++ b/libunwind/include/unwind.h
@@ -18,7 +18,8 @@
 #include <stdint.h>
 #include <stddef.h>
 
-#if defined(__SEH__) && !defined(__USING_SJLJ_EXCEPTIONS__) && defined(_WIN32)
+#if defined(__SEH__) && !defined(__USING_SJLJ_EXCEPTIONS__) &&                 \
+    (defined(_WIN32) || defined(__CYGWIN__))
 #include <windows.h>
 #include <ntverp.h>
 #endif
diff --git a/libunwind/src/AddressSpace.hpp b/libunwind/src/AddressSpace.hpp
index 63f9cb367ec0..5f7aa94905d0 100644
--- a/libunwind/src/AddressSpace.hpp
+++ b/libunwind/src/AddressSpace.hpp
@@ -24,11 +24,12 @@
 #include "Registers.hpp"
 
 #ifndef _LIBUNWIND_USE_DLADDR
-  #if !(defined(_LIBUNWIND_IS_BAREMETAL) || defined(_WIN32) || defined(_AIX))
-    #define _LIBUNWIND_USE_DLADDR 1
-  #else
-    #define _LIBUNWIND_USE_DLADDR 0
-  #endif
+#if !(defined(_LIBUNWIND_IS_BAREMETAL) || defined(_WIN32) || defined(_AIX) ||  \
+      defined(__CYGWIN__))
+#define _LIBUNWIND_USE_DLADDR 1
+#else
+#define _LIBUNWIND_USE_DLADDR 0
+#endif
 #endif
 
 #if _LIBUNWIND_USE_DLADDR
@@ -109,7 +110,8 @@ extern char __eh_frame_hdr_end;
 extern char __exidx_start;
 extern char __exidx_end;
 
-#elif defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND) && defined(_WIN32)
+#elif defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND) &&                              \
+    (defined(_WIN32) || defined(__CYGWIN__))
 
 #include <windows.h>
 #include <psapi.h>
@@ -551,7 +553,8 @@ inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,
                              (void *)info.arm_section, (void *)info.arm_section_length);
   if (info.arm_section && info.arm_section_length)
     return true;
-#elif defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND) && defined(_WIN32)
+#elif defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND) &&                              \
+    (defined(_WIN32) || defined(__CYGWIN__))
   HMODULE mods[1024];
   HANDLE process = GetCurrentProcess();
   DWORD needed;
@@ -591,7 +594,8 @@ inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,
     }
   }
   return false;
-#elif defined(_LIBUNWIND_SUPPORT_SEH_UNWIND) && defined(_WIN32)
+#elif defined(_LIBUNWIND_SUPPORT_SEH_UNWIND) &&                                \
+    (defined(_WIN32) || defined(__CYGWIN__))
   // Don't even bother, since Windows has functions that do all this stuff
   // for us.
   (void)targetAddr;
diff --git a/libunwind/src/CMakeLists.txt b/libunwind/src/CMakeLists.txt
index 514c2fcd5bf4..555eb7213f5f 100644
--- a/libunwind/src/CMakeLists.txt
+++ b/libunwind/src/CMakeLists.txt
@@ -89,6 +89,9 @@ add_link_flags_if(CXX_SUPPORTS_UNWINDLIB_EQ_NONE_FLAG --unwindlib=none)
 # MINGW_LIBRARIES is defined in config-ix.cmake
 add_library_flags_if(MINGW "${MINGW_LIBRARIES}")
 
+# CYGWIN_LIBRARIES is defined in config-ix.cmake
+add_library_flags_if(CYGWIN "${CYGWIN_LIBRARIES}")
+
 if (LIBUNWIND_ENABLE_SHARED AND
     NOT (CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG AND
          CXX_SUPPORTS_FUNWIND_TABLES_FLAG))
diff --git a/libunwind/src/Registers.hpp b/libunwind/src/Registers.hpp
index 5a5b57835379..34e4b6c5cc0c 100644
--- a/libunwind/src/Registers.hpp
+++ b/libunwind/src/Registers.hpp
@@ -341,12 +341,12 @@ private:
     uint64_t __cs;
     uint64_t __fs;
     uint64_t __gs;
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__) && defined(__x86_64__)
     uint64_t __padding; // 16-byte align
 #endif
   };
   GPRs _registers;
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__) && defined(__x86_64__)
   v128 _xmm[16];
 #endif
 };
@@ -562,7 +562,7 @@ inline void Registers_x86_64::setFloatRegister(int, double) {
 }
 
 inline bool Registers_x86_64::validVectorRegister(int regNum) const {
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__) && defined(__x86_64__)
   if (regNum < UNW_X86_64_XMM0)
     return false;
   if (regNum > UNW_X86_64_XMM15)
@@ -575,7 +575,7 @@ inline bool Registers_x86_64::validVectorRegister(int regNum) const {
 }
 
 inline v128 Registers_x86_64::getVectorRegister(int regNum) const {
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__) && defined(__x86_64__)
   assert(validVectorRegister(regNum));
   return _xmm[regNum - UNW_X86_64_XMM0];
 #else
@@ -585,7 +585,7 @@ inline v128 Registers_x86_64::getVectorRegister(int regNum) const {
 }
 
 inline void Registers_x86_64::setVectorRegister(int regNum, v128 value) {
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__) && defined(__x86_64__)
   assert(validVectorRegister(regNum));
   _xmm[regNum - UNW_X86_64_XMM0] = value;
 #else
diff --git a/libunwind/src/Unwind-seh.cpp b/libunwind/src/Unwind-seh.cpp
index 110c5987c3f1..6783bdccd33a 100644
--- a/libunwind/src/Unwind-seh.cpp
+++ b/libunwind/src/Unwind-seh.cpp
@@ -93,7 +93,7 @@ _GCC_specific_handler(PEXCEPTION_RECORD ms_exc, PVOID frame, PCONTEXT ms_ctx,
   bool ours = false;
 
   _LIBUNWIND_TRACE_UNWINDING("_GCC_specific_handler(%#010lx(%lx), %p)",
-                             ms_exc->ExceptionCode, ms_exc->ExceptionFlags,
+                             (unsigned long)ms_exc->ExceptionCode, (unsigned long)ms_exc->ExceptionFlags,
                              (void *)frame);
   if (ms_exc->ExceptionCode == STATUS_GCC_UNWIND) {
     if (IS_TARGET_UNWIND(ms_exc->ExceptionFlags)) {
@@ -148,7 +148,7 @@ _GCC_specific_handler(PEXCEPTION_RECORD ms_exc, PVOID frame, PCONTEXT ms_ctx,
 
   _LIBUNWIND_TRACE_UNWINDING("_GCC_specific_handler() calling personality "
                              "function %p(1, %d, %llx, %p, %p)",
-                             (void *)pers, action, exc->exception_class,
+                             (void *)pers, action, (unsigned long long)exc->exception_class,
                              (void *)exc, (void *)ctx);
   urc = pers(1, action, exc->exception_class, exc, ctx);
   _LIBUNWIND_TRACE_UNWINDING("_GCC_specific_handler() personality returned %d", urc);
diff --git a/libunwind/src/UnwindCursor.hpp b/libunwind/src/UnwindCursor.hpp
index 7ec5f9e91578..3d81d5400903 100644
--- a/libunwind/src/UnwindCursor.hpp
+++ b/libunwind/src/UnwindCursor.hpp
@@ -17,9 +17,9 @@
 #include <stdlib.h>
 #include <unwind.h>
 
-#ifdef _WIN32
-  #include <windows.h>
-  #include <ntverp.h>
+#if defined(_WIN32) || defined(__CYGWIN__)
+#include <windows.h>
+#include <ntverp.h>
 #endif
 #ifdef __APPLE__
   #include <mach-o/dyld.h>
@@ -502,7 +502,8 @@ public:
 #endif
 };
 
-#if defined(_LIBUNWIND_SUPPORT_SEH_UNWIND) && defined(_WIN32)
+#if defined(_LIBUNWIND_SUPPORT_SEH_UNWIND) &&                                  \
+    (defined(_WIN32) || defined(__CYGWIN__))
 
 /// \c UnwindCursor contains all state (including all register values) during
 /// an unwind.  This is normally stack-allocated inside a unw_cursor_t.
@@ -2028,7 +2029,7 @@ bool UnwindCursor<A, R>::getInfoFromSEH(pint_t pc) {
   pint_t base;
   RUNTIME_FUNCTION *unwindEntry = lookUpSEHUnwindInfo(pc, &base);
   if (!unwindEntry) {
-    _LIBUNWIND_DEBUG_LOG("\tpc not in table, pc=0x%llX", (uint64_t) pc);
+    _LIBUNWIND_DEBUG_LOG("\tpc not in table, pc=0x%llX", (unsigned long long) pc);
     return false;
   }
   _info.gp = 0;
@@ -2699,7 +2700,8 @@ void UnwindCursor<A, R>::setInfoBasedOnIPRegister(bool isReturnAddress) {
     --pc;
 #endif
 
-#if !(defined(_LIBUNWIND_SUPPORT_SEH_UNWIND) && defined(_WIN32)) &&            \
+#if !(defined(_LIBUNWIND_SUPPORT_SEH_UNWIND) &&                                \
+      (defined(_WIN32) || defined(__CYGWIN__))) &&                             \
     !defined(_LIBUNWIND_SUPPORT_TBTAB_UNWIND)
   // In case of this is frame of signal handler, the IP saved in the signal
   // handler points to first non-executed instruction, while FDE/CIE expects IP
diff --git a/libunwind/src/UnwindRegistersRestore.S b/libunwind/src/UnwindRegistersRestore.S
index 1ab4c43b673b..ddbf75f74735 100644
--- a/libunwind/src/UnwindRegistersRestore.S
+++ b/libunwind/src/UnwindRegistersRestore.S
@@ -77,7 +77,7 @@ DEFINE_LIBUNWIND_FUNCTION(__libunwind_Registers_x86_64_jumpto)
 #
 # extern "C" void __libunwind_Registers_x86_64_jumpto(Registers_x86_64 *);
 #
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
 # On entry, thread_state pointer is in rcx; move it into rdi
 # to share restore code below. Since this routine restores and
 # overwrites all registers, we can use the same registers for
@@ -118,7 +118,7 @@ DEFINE_LIBUNWIND_FUNCTION(__libunwind_Registers_x86_64_jumpto)
   # skip fs
   # skip gs
 
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   movdqu 176(%rdi),%xmm0
   movdqu 192(%rdi),%xmm1
   movdqu 208(%rdi),%xmm2
diff --git a/libunwind/src/UnwindRegistersSave.S b/libunwind/src/UnwindRegistersSave.S
index 31a177f4a0df..c1475d20b7ec 100644
--- a/libunwind/src/UnwindRegistersSave.S
+++ b/libunwind/src/UnwindRegistersSave.S
@@ -119,7 +119,7 @@ DEFINE_LIBUNWIND_FUNCTION("#__unw_getcontext")
 #  thread_state pointer is in rdi
 #
 DEFINE_LIBUNWIND_FUNCTION(__unw_getcontext)
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
 #define PTR %rcx
 #define TMP %rdx
 #else
@@ -152,7 +152,7 @@ DEFINE_LIBUNWIND_FUNCTION(__unw_getcontext)
   # skip fs
   # skip gs
 
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   movdqu %xmm0,176(PTR)
   movdqu %xmm1,192(PTR)
   movdqu %xmm2,208(PTR)
diff --git a/libunwind/src/assembly.h b/libunwind/src/assembly.h
index f8e83e138eff..3b6302d0ce7a 100644
--- a/libunwind/src/assembly.h
+++ b/libunwind/src/assembly.h
@@ -161,6 +161,7 @@
 #endif
 #define WEAK_SYMBOL(name) .weak name
 
+// clang-format off
 #if defined(__hexagon__)
 #define WEAK_ALIAS(name, aliasname)                                            \
   EXPORT_SYMBOL(SYMBOL_NAME(aliasname)) SEPARATOR                              \
@@ -172,6 +173,7 @@
   WEAK_SYMBOL(SYMBOL_NAME(aliasname)) SEPARATOR                                \
   SYMBOL_NAME(aliasname) = SYMBOL_NAME(name)
 #endif
+// clang-format on
 
 #if defined(__GNU__) || defined(__FreeBSD__) || defined(__Fuchsia__) || \
     defined(__linux__)
@@ -180,8 +182,9 @@
 #define NO_EXEC_STACK_DIRECTIVE
 #endif
 
-#elif defined(_WIN32)
+#elif defined(_WIN32) || defined(__CYGWIN__)
 
+// clang-format off
 #define SYMBOL_IS_FUNC(name)                                                   \
   .def name SEPARATOR                                                          \
     .scl 2 SEPARATOR                                                           \
@@ -197,8 +200,10 @@
 #define EXPORT_SYMBOL(name) EXPORT_SYMBOL2(name)
 #endif
 #define HIDDEN_SYMBOL(name)
+// clang-format off
 
-#if defined(__MINGW32__)
+// clang-format off
+#if defined(__MINGW32__) || defined(__CYGWIN__)
 #define WEAK_ALIAS(name, aliasname)                                            \
   .globl SYMBOL_NAME(aliasname) SEPARATOR                                      \
   EXPORT_SYMBOL(aliasname) SEPARATOR                                           \
@@ -214,6 +219,7 @@
   EXPORT_SYMBOL(SYMBOL_NAME(aliasname)) SEPARATOR                              \
   WEAK_ALIAS2(SYMBOL_NAME(name), SYMBOL_NAME(aliasname))
 #endif
+// clang-format on
 
 #define NO_EXEC_STACK_DIRECTIVE
 
diff --git a/libunwind/src/config.h b/libunwind/src/config.h
index deb5a4d4d73d..83156e341f1c 100644
--- a/libunwind/src/config.h
+++ b/libunwind/src/config.h
@@ -28,12 +28,12 @@
     #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND 1
     #define _LIBUNWIND_SUPPORT_DWARF_UNWIND 1
   #endif
-#elif defined(_WIN32)
-  #ifdef __SEH__
-    #define _LIBUNWIND_SUPPORT_SEH_UNWIND 1
-  #else
-    #define _LIBUNWIND_SUPPORT_DWARF_UNWIND 1
-  #endif
+#elif defined(_WIN32) || defined(__CYGWIN__)
+#ifdef __SEH__
+#define _LIBUNWIND_SUPPORT_SEH_UNWIND 1
+#else
+#define _LIBUNWIND_SUPPORT_DWARF_UNWIND 1
+#endif
 #elif defined(_LIBUNWIND_IS_BAREMETAL)
   #if !defined(_LIBUNWIND_ARM_EHABI)
     #define _LIBUNWIND_SUPPORT_DWARF_UNWIND 1
@@ -104,6 +104,10 @@
                                              SYMBOL_NAME(name)))               \
   extern "C" _LIBUNWIND_EXPORT __typeof(name) aliasname;
 #endif
+#elif defined(__CYGWIN__)
+#define _LIBUNWIND_WEAK_ALIAS(name, aliasname)                                 \
+  extern "C" _LIBUNWIND_EXPORT __typeof(name) aliasname                        \
+      __attribute__((alias(#name)));
 #else
 #error Unsupported target
 #endif
@@ -126,7 +130,7 @@
 #ifndef _LIBUNWIND_REMEMBER_HEAP_ALLOC
 #if defined(_LIBUNWIND_REMEMBER_STACK_ALLOC) || defined(__APPLE__) ||          \
     defined(__linux__) || defined(__ANDROID__) || defined(__MINGW32__) ||      \
-    defined(_LIBUNWIND_IS_BAREMETAL)
+    defined(_LIBUNWIND_IS_BAREMETAL) || defined(__CYGWIN__)
 #define _LIBUNWIND_REMEMBER_ALLOC(_size) __builtin_alloca(_size)
 #define _LIBUNWIND_REMEMBER_FREE(_ptr)                                         \
   do {                                                                         \
diff --git a/libunwind/test/signal_frame.pass.cpp b/libunwind/test/signal_frame.pass.cpp
index 004029cfe1e9..0bc9dfacb536 100644
--- a/libunwind/test/signal_frame.pass.cpp
+++ b/libunwind/test/signal_frame.pass.cpp
@@ -24,6 +24,7 @@
 // Windows doesn't generally use CFI directives. However, i686
 // mingw targets do use DWARF (where CFI directives are supported).
 // UNSUPPORTED: target={{x86_64|arm.*|aarch64}}-{{.*}}-windows-{{.*}}
+// UNSUPPORTED: cygwin
 
 #undef NDEBUG
 #include <assert.h>
-- 
2.51.1

